---
import Layout from '../layouts/Layout.astro';
import ConsultationModal from '../components/consultation/ConsultationModal.astro';

const features = [
  {
    title: "Premium Calculator",
    description: "Get instant estimates for your basic health insurance premiums",
    icon: `<svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2" />
    </svg>`
  },
  {
    title: "Insurance Forms",
    description: "Request termination forms and other important documents",
    icon: `<svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
    </svg>`
  },
  {
    title: "Coverage Comparison",
    description: "Get detailed comparisons of insurance options and providers",
    icon: `<svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
    </svg>`
  },
  {
    title: "Expert Consultation",
    description: "Schedule meetings or request callbacks from our insurance experts",
    icon: `<svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
    </svg>`
  }
];
---

<Layout
  title="AI Insurance Assistant | Instant Help & Calculations"
  description="Get instant help with Swiss insurance questions, premium calculations, and coverage comparisons. Our AI assistant is available 24/7 to help you make informed decisions."
>
  <!-- Hero Section -->
  <div class="bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <div class="text-center">
        <h1 class="text-4xl font-extrabold text-gray-900 sm:text-5xl md:text-6xl">
          <span class="block">Your 24/7</span>
          <span class="block text-primary-600">Insurance Assistant</span>
        </h1>
        <p class="mt-3 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl">
          Get instant answers to your insurance questions, calculate premiums, and compare coverage options with our AI-powered assistant.
        </p>
        <!-- AI Chat Choice Buttons -->
        <div class="mt-8 space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 max-w-4xl mx-auto">
            <button
              onclick="startChat('premium')"
              class="choice-btn bg-white border-2 border-primary-300 text-primary-700 hover:bg-primary-50 hover:border-primary-500 px-6 py-4 rounded-xl font-semibold transition-all duration-200 shadow-md hover:shadow-lg"
            >
              üí∞ Calculate Premiums
            </button>
            <button
              onclick="startChat('compare')"
              class="choice-btn bg-white border-2 border-primary-300 text-primary-700 hover:bg-primary-50 hover:border-primary-500 px-6 py-4 rounded-xl font-semibold transition-all duration-200 shadow-md hover:shadow-lg"
            >
              üìä Compare Providers
            </button>
            <button
              onclick="startChat('general')"
              class="choice-btn bg-white border-2 border-primary-300 text-primary-700 hover:bg-primary-50 hover:border-primary-500 px-6 py-4 rounded-xl font-semibold transition-all duration-200 shadow-md hover:shadow-lg"
            >
              ‚ùì General Questions
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Features Grid -->
  <div class="bg-gray-50 py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-4">
        {features.map(feature => (
          <div class="bg-white rounded-lg shadow-md p-6">
            <div class="text-primary-500 mb-4">
              <Fragment set:html={feature.icon} />
            </div>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">{feature.title}</h3>
            <p class="text-gray-600">{feature.description}</p>
          </div>
        ))}
      </div>
    </div>
  </div>

  <!-- AI Chat Interface -->
  <div id="chat-section" class="bg-gray-50 py-16 hidden">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-white rounded-xl shadow-lg overflow-hidden">
        <!-- Chat Header -->
        <div class="bg-primary-600 text-white px-6 py-4 flex items-center justify-between">
          <div class="flex items-center">
            <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
            </svg>
            <h3 class="text-lg font-semibold">AI Insurance Assistant</h3>
            <span class="ml-2 text-xs bg-green-400 text-green-800 px-2 py-1 rounded-full">Powered by GPT-5</span>
          </div>
          <button onclick="resetChat()" class="text-white hover:text-gray-200">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
          </button>
        </div>

        <!-- Chat Messages -->
        <div id="chat-messages" class="h-96 overflow-y-auto p-6 space-y-4">
          <div class="flex items-start space-x-3">
            <div class="flex-shrink-0 w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center">
              ü§ñ
            </div>
            <div class="bg-gray-100 rounded-lg px-4 py-2 max-w-xs">
              <p class="text-sm text-gray-800">Hello! I am your AI insurance assistant powered by GPT-5. How can I help you today?</p>
            </div>
          </div>
        </div>

        <!-- Chat Input -->
        <div class="border-t border-gray-200 px-6 py-4">
          <div class="flex items-center space-x-3">
            <input
              type="text"
              id="chat-input"
              placeholder="Type your message..."
              class="flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            />
            <button
              onclick="sendMessage()"
              id="send-btn"
              class="bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Send
            </button>
          </div>
          <div class="mt-3 flex items-center space-x-2">
            <input type="email" id="user-email" placeholder="Your email (optional)" class="flex-1 text-sm border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-1 focus:ring-primary-500">
            <button onclick="requestEmailSummary()" class="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-2 rounded">üìß Email Summary</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Additional Information -->
  <div class="bg-white py-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="max-w-3xl mx-auto text-center">
        <h2 class="text-3xl font-extrabold text-gray-900">Need More Help?</h2>
        <p class="mt-4 text-lg text-gray-500">
          While our AI assistant can help with many questions, sometimes you need a human touch. Schedule a free consultation with our insurance experts for personalized guidance.
        </p>
        <div class="mt-8">
          <button
            onclick="window.openOffersModal && window.openOffersModal()"
            class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700"
          >
            Book Free Consultation
          </button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .ai-chat-button {
    isolation: isolate;
  }

  .ai-button-glow {
    background: radial-gradient(
      circle at var(--mouse-x, 50%) var(--mouse-y, 50%),
      rgba(255, 255, 255, 0.3),
      transparent 50%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    mix-blend-mode: overlay;
    pointer-events: none;
  }

  .ai-chat-button:hover .ai-button-glow {
    opacity: 1;
  }

  /* Add mouse tracking for button glow effect */
  .ai-chat-button {
    --mouse-x: 50%;
    --mouse-y: 50%;
  }
</style>

<script>
  let chatContext = '';
  let chatHistory = [];

  // Start chat with specific context
  function startChat(type) {
    chatContext = type;
    const chatSection = document.getElementById('chat-section');
    chatSection.classList.remove('hidden');
    
    // Scroll to chat section
    chatSection.scrollIntoView({ behavior: 'smooth' });
    
    // Clear existing messages except welcome
    const messagesContainer = document.getElementById('chat-messages');
    messagesContainer.innerHTML = `
      <div class="flex items-start space-x-3">
        <div class="flex-shrink-0 w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center">
          ü§ñ
        </div>
        <div class="bg-gray-100 rounded-lg px-4 py-2 max-w-xs">
          <p class="text-sm text-gray-800">${getContextMessage(type)}</p>
        </div>
      </div>
    `;
    
    // Focus input
    document.getElementById('chat-input').focus();
  }

  // Get context-specific welcome message
  function getContextMessage(type) {
    switch(type) {
      case 'premium':
        return "I will help you calculate Swiss health insurance premiums! What is your age, location, and preferred deductible?";
      case 'compare':
        return "I will help you compare Swiss insurance providers! Are you looking for basic insurance, supplementary coverage, or both?";
      case 'general':
        return "I am here to answer any Swiss insurance questions you have! What would you like to know?";
      default:
        return "Hello! I am your AI insurance assistant powered by GPT-5. How can I help you today?";
    }
  }

  // Send message to AI
  async function sendMessage() {
    const input = document.getElementById('chat-input');
    const message = input.value.trim();
    if (!message) return;

    // Disable send button
    const sendBtn = document.getElementById('send-btn');
    sendBtn.disabled = true;
    sendBtn.textContent = 'Sending...';

    // Add user message
    addMessage('user', message);
    input.value = '';

    // Add AI thinking message
    const thinkingId = addMessage('ai', 'ü§î Thinking...');

    try {
      // Call your advanced Python backend with GPT-5
      const response = await fetch('/api/agent_json', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          message: message,
          context: chatContext,
          history: chatHistory
        })
      });

      const data = await response.json();
      
      // Remove thinking message
      document.getElementById(thinkingId).remove();
      
      if (data.success) {
        addMessage('ai', data.response);
        chatHistory.push({ role: 'user', content: message });
        chatHistory.push({ role: 'assistant', content: data.response });
      } else {
        addMessage('ai', 'Sorry, I encountered an error. Please try again.');
      }
    } catch (error) {
      // Remove thinking message
      document.getElementById(thinkingId).remove();
      addMessage('ai', 'Sorry, I am having trouble connecting. Please try again in a moment.');
    }

    // Re-enable send button
    sendBtn.disabled = false;
    sendBtn.textContent = 'Send';
  }

  // Add message to chat
  function addMessage(role, content) {
    const messagesContainer = document.getElementById('chat-messages');
    const messageId = 'msg-' + Date.now();
    const isUser = role === 'user';
    
    const messageDiv = document.createElement('div');
    messageDiv.id = messageId;
    messageDiv.className = `flex items-start space-x-3 ${isUser ? 'justify-end' : ''}`;
    
    messageDiv.innerHTML = `
      ${!isUser ? `
        <div class="flex-shrink-0 w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center">
          ü§ñ
        </div>
      ` : ''}
      <div class="bg-${isUser ? 'primary-600 text-white' : 'gray-100'} rounded-lg px-4 py-2 max-w-xs ${isUser ? 'ml-auto' : ''}">
        <p class="text-sm ${isUser ? 'text-white' : 'text-gray-800'}">${content}</p>
      </div>
      ${isUser ? `
        <div class="flex-shrink-0 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
          üë§
        </div>
      ` : ''}
    `;
    
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    return messageId;
  }

  // Reset chat
  function resetChat() {
    chatHistory = [];
    const messagesContainer = document.getElementById('chat-messages');
    messagesContainer.innerHTML = `
      <div class="flex items-start space-x-3">
        <div class="flex-shrink-0 w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center">
          ü§ñ
        </div>
        <div class="bg-gray-100 rounded-lg px-4 py-2 max-w-xs">
          <p class="text-sm text-gray-800">Hello! I am your AI insurance assistant powered by GPT-5. How can I help you today?</p>
        </div>
      </div>
    `;
  }

  // Request email summary via Resend
  async function requestEmailSummary() {
    const email = document.getElementById('user-email').value.trim();
    if (!email) {
      alert('Please enter your email address first.');
      return;
    }

    if (chatHistory.length === 0) {
      alert('Please have a conversation first before requesting a summary.');
      return;
    }

    try {
      // Use your backend email service  
      const response = await fetch('/api/agent_json', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          message: `Please send a summary of our conversation to email: ${email}`,
          email: email,
          conversation: chatHistory,
          context: chatContext,
          action: 'send_summary'
        })
      });

      const data = await response.json();
      if (data.success) {
        addMessage('ai', `‚úÖ Great! I have sent a summary of our conversation to ${email}. Check your inbox!`);
      } else {
        addMessage('ai', 'Sorry, I could not send the email summary. Please try again.');
      }
    } catch (error) {
      addMessage('ai', 'Sorry, there was an error sending the summary. Please try again.');
    }
  }

  // Handle Enter key in input
  document.addEventListener('DOMContentLoaded', () => {
    const input = document.getElementById('chat-input');
    if (input) {
      input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          sendMessage();
        }
      });
    }
  });
</script>