---
// Calendar step takes the insurance type as a prop to determine which calendar link to use
interface Props {
  insuranceType: string;
}

const { insuranceType = 'health' } = Astro.props;

// Determine which Cal.com link to use based on insurance type
let calLink = "robertkolar/expat-savvy"; // default fallback

switch(insuranceType) {
  case 'health':
    calLink = "robertkolar/change-health-insurance";
    break;
  case 'new-health':
    calLink = "robertkolar/setting-up-health-insurance-in-switzerland";
    break;
  case 'liability':
  case 'household':
    calLink = "robertkolar/household-liability-insurance";
    break;
  case 'pension':
    calLink = "robertkolar/third-pillar-pension-solutions";
    break;
  default:
    calLink = "robertkolar/expat-savvy";
}
---

<div class="calendar-step">
  <h2 class="text-2xl sm:text-3xl font-extrabold mb-6 text-gray-900 text-center">Select a Convenient Time</h2>
  
  <div class="text-center mb-6">
    <p class="text-gray-600">Choose a time that works best for your schedule.</p>
    <p class="text-gray-600">Our consultants are available 7 days a week, including evenings.</p>
  </div>
  
  <div class="calendar-container mb-6 bg-gray-50 rounded-xl p-6 max-w-3xl mx-auto">
    <!-- Cal.com embedded directly using the inline code -->
    <div style="width:100%;height:100%;overflow:scroll" id="my-cal-inline"></div>
  </div>
  
  <!-- Alternative contact option -->
  <div class="my-6 max-w-xl mx-auto">
    <div class="border-t border-gray-200 pt-4 text-center">
      <p class="text-gray-600 mb-4">Prefer to chat first? Reach out directly:</p>
      <button
        type="button"
        id="whatsapp-button"
        class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-[#128C7E] hover:bg-[#075E54] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#075E54]"
      >
        <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
          <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
        </svg>
        Chat on WhatsApp
      </button>
    </div>
  </div>
  
  <!-- Back button -->
  <div class="flex justify-start mt-8">
    <button 
      type="button" 
      class="modal-prev-btn flex items-center justify-center px-6 py-3 border border-gray-300 shadow-sm text-base font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
      data-current-step="3"
    >
      <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
      </svg>
      Back to Details
    </button>
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    console.log("CalendarStep: DOM loaded, initializing Cal.com");
    
    // Get insurance type set in the parent container
    const modalElement = document.getElementById('consultation-modal');
    const insuranceType = modalElement?.getAttribute('data-insurance-type') || 'health';
    console.log("CalendarStep: Insurance type detected:", insuranceType);
    
    // Dynamically determine which cal link to use
    let calLink = "robertkolar/change-health-insurance"; // default to health
    
    // This should match the server-side logic
    if (insuranceType === 'new-health') {
      calLink = "robertkolar/setting-up-health-insurance-in-switzerland";
    } else if (insuranceType === 'pension') {
      calLink = "robertkolar/third-pillar-pension-solutions";
    } else if (insuranceType === 'liability' || insuranceType === 'household') {
      calLink = "robertkolar/household-liability-insurance";
    }
    console.log("CalendarStep: Using Cal.com link:", calLink);
    
    // Create a loading indicator immediately
    const calContainer = document.getElementById('my-cal-inline');
    if (calContainer) {
      const loadingDiv = document.createElement('div');
      loadingDiv.id = 'cal-loading-fallback';
      loadingDiv.style.textAlign = 'center';
      loadingDiv.style.padding = '40px';
      loadingDiv.innerHTML = `
        <div style="display: inline-block; border: 4px solid #f3f3f3; border-top: 4px solid #e11d48; border-radius: 50%; width: 40px; height: 40px; animation: spin 2s linear infinite;"></div>
        <p style="margin-top: 16px; color: #666;">Loading calendar...</p>
        <style>
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        </style>
      `;
      calContainer.appendChild(loadingDiv);
    }
    
    // Load Cal.com with a slight delay to prioritize UI rendering
    setTimeout(() => {
      try {
        // Setup Cal.com
        window.Cal = window.Cal || {};
        window.Cal.q = window.Cal.q || [];
        
        // Only load the script if it hasn't been loaded yet
        if (!window.calScriptLoaded) {
          const script = document.createElement('script');
          script.src = "https://app.cal.com/embed/embed.js";
          script.async = true;
          script.defer = true;
          script.onload = () => {
            window.calScriptLoaded = true;
            initializeCalendar();
          };
          document.head.appendChild(script);
        } else {
          // Script already loaded, just initialize
          initializeCalendar();
        }
        
        function initializeCalendar() {
          if (typeof Cal === 'function') {
            Cal("init", "change-health-insurance", {origin:"https://cal.com"});
            
            // Set up inline embed with the appropriate calLink
            Cal.ns["change-health-insurance"]("inline", {
              elementOrSelector: "#my-cal-inline",
              config: {"layout":"month_view","theme":"light"},
              calLink: calLink,
            });
            
            // Set UI configuration
            Cal.ns["change-health-insurance"]("ui", {"theme":"light","hideEventTypeDetails":false,"layout":"month_view"});
            
            // Listen for Cal.com iframe load to remove the loading indicator
            const observer = new MutationObserver((mutations) => {
              mutations.forEach((mutation) => {
                if (mutation.type === 'childList' && calContainer) {
                  const iframe = calContainer.querySelector('iframe');
                  if (iframe) {
                    const fallbackLoader = document.getElementById('cal-loading-fallback');
                    if (fallbackLoader) {
                      fallbackLoader.remove();
                    }
                    observer.disconnect();
                  }
                }
              });
            });
            
            if (calContainer) {
              observer.observe(calContainer, { childList: true, subtree: true });
            }
          }
        }
        
        // Add timeout to handle cases where Cal.com takes too long to load
        setTimeout(() => {
          const fallbackLoader = document.getElementById('cal-loading-fallback');
          if (fallbackLoader && calContainer && calContainer.contains(fallbackLoader)) {
            if (calContainer.querySelector('iframe')) {
              fallbackLoader.remove();
            } else {
              fallbackLoader.innerHTML += `
                <p style="margin-top: 16px; color: #e11d48;">
                  Calendar is taking longer than expected to load. 
                  <a href="#" onclick="window.location.reload(); return false;" style="color: #e11d48; text-decoration: underline;">Refresh the page</a> or continue with WhatsApp.
                </p>
              `;
            }
          }
        }, 10000);
        
      } catch (error) {
        console.error("CalendarStep: Error initializing Cal.com:", error);
        
        // Show error message if Cal.com fails to initialize
        const calContainer = document.getElementById('my-cal-inline');
        if (calContainer) {
          calContainer.innerHTML = `
            <div style="text-align: center; padding: 40px; background-color: #fee2e2; border-radius: 8px;">
              <p style="color: #b91c1c; margin-bottom: 16px;">Unable to load the calendar.</p>
              <p style="color: #666;">Please try refreshing the page or contact us directly:</p>
              <button id="whatsapp-error-button" style="background-color: #128C7E; color: white; padding: 8px 16px; border-radius: 6px; border: none; margin-top: 16px; cursor: pointer;">Chat on WhatsApp</button>
            </div>
          `;
          
          // Add event listener to the WhatsApp button in error message
          const whatsappErrorBtn = document.getElementById('whatsapp-error-button');
          if (whatsappErrorBtn) {
            whatsappErrorBtn.addEventListener('click', function() {
              window.open('https://wa.me/41791552570', '_blank');
            });
          }
        }
      }
    }, 100); // Small delay to prioritize UI rendering
    
    // Listen for booking completion events from Cal.com
    window.addEventListener('message', function(e) {
      if (e.data?.type === 'CAL:BOOKING_COMPLETED') {
        console.log("CalendarStep: Booking completed event received");
        // Get stored form data
        const formDataString = sessionStorage.getItem('consultationFormData');
        if (formDataString) {
          try {
            // Parse the stored data
            const formData = JSON.parse(formDataString);
            
            // Add booking details
            formData.bookingCompleted = true;
            formData.bookingTime = new Date().toISOString();
            formData.calEvent = e.data?.data; // Cal.com event data
            
            // Store updated data
            sessionStorage.setItem('consultationFormData', JSON.stringify(formData));
            console.log("CalendarStep: Form data updated with booking details");
            
            // Move to the confirmation step
            const nextStep = 4;
            const stepElements = document.querySelectorAll('.modal-step');
            stepElements.forEach(step => {
              step.classList.add('hidden');
              step.classList.remove('active');
            });
            
            const targetStep = document.getElementById(`consultation-step-${nextStep}`);
            if (targetStep) {
              targetStep.classList.remove('hidden');
              targetStep.classList.add('active');
              
              // Update progress indicators
              const indicators = document.querySelectorAll('.modal-step-indicator .step');
              indicators.forEach((indicator, index) => {
                const stepNum = index + 1;
                const line = indicator.querySelector('.h-1');
                const circle = indicator.querySelector('.w-4');
                
                if (stepNum < nextStep) {
                  // Previous steps
                  indicator.classList.add('completed');
                  if (line) {
                    line.classList.remove('bg-gray-300');
                    line.classList.add('bg-red-600');
                  }
                  if (circle) {
                    circle.classList.remove('bg-white', 'border-gray-300');
                    circle.classList.add('bg-red-600', 'border-red-600', 'text-white');
                  }
                } else if (stepNum === nextStep) {
                  // Current step
                  indicator.classList.add('active');
                  indicator.classList.remove('completed');
                  if (line) {
                    line.classList.remove('bg-gray-300');
                    line.classList.add('bg-red-600');
                  }
                  if (circle) {
                    circle.classList.remove('bg-white', 'border-gray-300');
                    circle.classList.add('bg-white', 'border-red-600');
                  }
                }
              });
              console.log("CalendarStep: Moved to confirmation step");
            } else {
              console.error("CalendarStep: Could not find confirmation step element");
            }
          } catch (error) {
            console.error('Error processing form data after booking:', error);
          }
        } else {
          console.warn("CalendarStep: No form data found in sessionStorage");
        }
      }
    });
    
    // WhatsApp button handler
    const whatsappButton = document.getElementById('whatsapp-button');
    if (whatsappButton) {
      whatsappButton.addEventListener('click', function() {
        window.open('https://wa.me/41791552570', '_blank');
      });
    }
  });
</script> 