---
import IntroStep from './IntroStep.astro';
import FormStep from './FormStep.astro';
import CalendarStep from './CalendarStep.astro';
import ThankYouStep from './ThankYouStep.astro';

// Get current page path to determine context
const currentPath = Astro.url.pathname;

// Determine what insurance type this page is about based on the URL path
let insuranceType = 'health'; // default
let contextTitle = 'Insurance Consultation'; // default title
let providerId = ''; // for insurance provider pages
let providerName = ''; // for insurance provider pages

// First check for major sections
if (currentPath.includes('/healthcare/')) {
  if (currentPath.includes('new-health-insurance') || currentPath.includes('setup') || currentPath.includes('new-residents')) {
    insuranceType = 'new-health';
    contextTitle = 'Setting Up Health Insurance';
  } else if (currentPath.includes('switch') || currentPath.includes('change') || currentPath.includes('switching')) {
    insuranceType = 'change-health';
    contextTitle = 'Changing Health Insurance';
  } else {
    insuranceType = 'health';
    contextTitle = 'Health Insurance Consultation';
  }
} else if (currentPath.includes('/3rd-pillar/') || currentPath.includes('/pension/') || currentPath.includes('pension-planning')) {
  insuranceType = 'pension';
  contextTitle = '3rd Pillar & Pension Planning';
} else if (currentPath.includes('/liability/') || currentPath.includes('personal-liability')) {
  insuranceType = 'liability';
  contextTitle = 'Liability Insurance Consultation';
} else if (currentPath.includes('/household/') || currentPath.includes('household-insurance')) {
  insuranceType = 'household';
  contextTitle = 'Household Insurance Consultation';
} else if (currentPath.includes('/life/') || currentPath.includes('life-insurance')) {
  insuranceType = 'life';
  contextTitle = 'Life Insurance Consultation';
} else if (currentPath.includes('/legal/') || currentPath.includes('legal-protection')) {
  insuranceType = 'legal';
  contextTitle = 'Legal Protection Insurance';
}

// Check for insurance provider specific pages
if (currentPath.includes('/healthcare/all-insurances/')) {
  const providerMatch = currentPath.match(/\/healthcare\/all-insurances\/([^\/]+)/);
  if (providerMatch && providerMatch[1]) {
    providerId = providerMatch[1];
    // Format the provider name nicely with uppercase first letter
    providerName = providerId.charAt(0).toUpperCase() + providerId.slice(1);
    contextTitle = `${providerName} Insurance Consultation`;
  }
} 

// Check for comparison pages
if (currentPath.includes('/compare-providers/')) {
  const compareMatch = currentPath.match(/\/compare-providers\/([^\/]+)/);
  if (compareMatch && compareMatch[1]) {
    const comparison = compareMatch[1].replace(/-vs-/g, ' vs ');
    contextTitle = `${comparison.toUpperCase()} Comparison`;
  } else {
    contextTitle = 'Insurance Comparison';
  }
}

// Recent bookings data - social proof
const recentBookings = {
  last24h: 7,
  last7days: 28
};

// If URL has special parameters, override the defaults
const urlParams = new URL(Astro.request.url).searchParams;
const urlInsuranceType = urlParams.get('type');
const urlProviderName = urlParams.get('provider');

if (urlInsuranceType && ['health', 'new-health', 'pension', 'liability', 'household', 'life', 'legal'].includes(urlInsuranceType)) {
  insuranceType = urlInsuranceType;
}

if (urlProviderName) {
  providerName = urlProviderName;
  contextTitle = `${providerName} Insurance Consultation`;
}

// Props from parent component (can override defaults)
const props = Astro.props;
const finalInsuranceType = props.insuranceType || insuranceType;
const finalContextTitle = props.contextTitle || contextTitle;
const finalProviderId = props.providerId || providerId;
const finalProviderName = props.providerName || providerName;
---

<div id="consultation-modal" 
    class="fixed inset-0 bg-black bg-opacity-70 hidden z-50" 
    data-insurance-type={finalInsuranceType} 
    data-provider-id={finalProviderId}
    data-provider-name={finalProviderName}
    data-context-title={finalContextTitle}
    data-modal-backdrop="true">
  <div class="fixed inset-0 flex items-center justify-center p-2 sm:p-4">
    <div class="bg-white rounded-2xl max-w-5xl w-full p-4 sm:p-8 relative shadow-xl modal-content overflow-y-auto max-h-[90vh]">
      <!-- Close button -->
      <button
        id="close-modal-btn"
        class="absolute top-3 right-3 sm:top-4 sm:right-4 text-gray-400 hover:text-gray-600 z-10"
        aria-label="Close"
        data-close-modal="true"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
      
      <!-- Modal step indicators -->
      <div class="modal-step-indicator flex items-center justify-between mb-6">
        <div class="step step-1 active flex-grow flex items-center space-x-1">
          <div class="w-4 h-4 flex items-center justify-center rounded-full bg-white border border-red-600 text-xs">1</div>
          <div class="h-1 bg-red-600 flex-grow rounded-full"></div>
        </div>
        <div class="step step-2 flex-grow flex items-center space-x-1">
          <div class="w-4 h-4 flex items-center justify-center rounded-full bg-white border border-gray-300 text-gray-400 text-xs">2</div>
          <div class="h-1 bg-gray-300 flex-grow rounded-full"></div>
        </div>
        <div class="step step-3 flex-grow flex items-center space-x-1">
          <div class="w-4 h-4 flex items-center justify-center rounded-full bg-white border border-gray-300 text-gray-400 text-xs">3</div>
          <div class="h-1 bg-gray-300 flex-grow rounded-full"></div>
        </div>
        <div class="step step-4 flex-grow flex items-center">
          <div class="w-4 h-4 flex items-center justify-center rounded-full bg-white border border-gray-300 text-gray-400 text-xs">4</div>
        </div>
      </div>
      
      <div class="modal-steps">
        <!-- Step 1: Introduction -->
        <div class="modal-step step-1 active" id="consultation-step-1">
          <IntroStep insuranceType={finalInsuranceType} recentBookings={recentBookings} contextTitle={finalContextTitle} providerName={finalProviderName} />
        </div>
        
        <!-- Step 2: Form collection -->
        <div class="modal-step step-2 hidden" id="consultation-step-2">
          <FormStep insuranceType={finalInsuranceType} contextTitle={finalContextTitle} providerName={finalProviderName} />
        </div>
        
        <!-- Step 3: Calendar selection based on form input -->
        <div class="modal-step step-3 hidden" id="consultation-step-3">
          <CalendarStep insuranceType={finalInsuranceType} />
        </div>
        
        <!-- Step 4: Thank you message -->
        <div class="modal-step step-4 hidden" id="consultation-step-4">
          <ThankYouStep insuranceType={finalInsuranceType} contextTitle={finalContextTitle} providerName={finalProviderName} />
        </div>
      </div>
      
      <!-- Legal disclosure -->
      <p class="text-xs text-gray-500 text-center mt-6">
        As a registered broker, our consultations are free of charge. 
        We receive commissions from insurance providers when you choose their services through us.
        Your ongoing support and advice remain complimentary.
      </p>
    </div>
  </div>
</div>

<script>
  // Delay initialization until DOMContentLoaded to avoid blocking initial render
  document.addEventListener('DOMContentLoaded', function() {
    // User data storage
    const userData = {
      name: '',
      email: '',
      phone: '',
      topic: '',
      source: '',
      notes: '',
      insuranceType: document.getElementById('consultation-modal')?.getAttribute('data-insurance-type') || 'health',
      providerName: document.getElementById('consultation-modal')?.getAttribute('data-provider-name') || ''
    };
    
    // Step navigation function - optimized to reduce DOM operations
    function goToStep(stepNumber: number): void {
      // Only modify DOM if modal is actually visible
      const modal = document.getElementById('consultation-modal');
      if (!modal || modal.classList.contains('hidden')) {
        return;
      }
      
      // Cache DOM elements to avoid repetitive lookups
      const steps = document.querySelectorAll('.modal-step');
      const indicators = document.querySelectorAll('.modal-step-indicator .step');
      
      // Hide all steps at once with a single class toggle
      steps.forEach(step => {
        const isTargetStep = step.id === `consultation-step-${stepNumber}`;
        step.classList.toggle('hidden', !isTargetStep);
        step.classList.toggle('active', isTargetStep);
      });
      
      // Update step indicators more efficiently
      indicators.forEach((indicator, index) => {
        const currentStep = index + 1;
        const circle = indicator.querySelector('.w-4');
        const line = indicator.querySelector('.h-1');
        
        // Set appropriate classes in batch operations
        if (currentStep < stepNumber) {
          // Previous steps
          indicator.className = indicator.className.replace(/active|completed/g, '') + ' completed';
          
          if (circle) {
            circle.className = 'w-4 h-4 flex items-center justify-center rounded-full bg-red-600 border border-red-600 text-white text-xs';
          }
          
          if (line) {
            line.className = 'h-1 bg-red-600 flex-grow rounded-full';
          }
        } 
        else if (currentStep === stepNumber) {
          // Current step
          indicator.className = indicator.className.replace(/active|completed/g, '') + ' active';
          
          if (circle) {
            circle.className = 'w-4 h-4 flex items-center justify-center rounded-full bg-white border border-red-600 text-xs';
          }
          
          if (line) {
            line.className = 'h-1 bg-red-600 flex-grow rounded-full';
          }
        } 
        else {
          // Future steps
          indicator.className = indicator.className.replace(/active|completed/g, '');
          
          if (circle) {
            circle.className = 'w-4 h-4 flex items-center justify-center rounded-full bg-white border border-gray-300 text-gray-400 text-xs';
          }
          
          if (line && currentStep < 4) {
            line.className = 'h-1 bg-gray-300 flex-grow rounded-full';
          }
        }
      });
    }
    
    // Next buttons handler - with debounce to prevent multiple clicks
    let isProcessing = false;
    document.querySelectorAll('.modal-next-btn').forEach(button => {
      button.addEventListener('click', function(this: HTMLElement) {
        // Prevent double-clicks
        if (isProcessing) return;
        isProcessing = true;
        
        const currentStep = parseInt(this.getAttribute('data-current-step') || '1');
        const nextStep = currentStep + 1;
        
        // If on form step, validate and collect data
        if (currentStep === 2) {
          const nameInput = document.getElementById('consultation-name') as HTMLInputElement;
          const emailInput = document.getElementById('consultation-email') as HTMLInputElement;
          const phoneInput = document.getElementById('consultation-phone') as HTMLInputElement;
          const topicSelect = document.getElementById('consultation-topic') as HTMLSelectElement;
          const sourceSelect = document.getElementById('consultation-source') as HTMLSelectElement;
          const notesInput = document.getElementById('consultation-notes') as HTMLTextAreaElement;
          
          // Validation
          if (!nameInput?.value || !emailInput?.value) {
            alert('Please fill in your name and email to continue.');
            isProcessing = false;
            return;
          }
          
          // Store data for Cal.com prefill
          userData.name = nameInput?.value;
          userData.email = emailInput?.value;
          userData.phone = phoneInput?.value || '';
          userData.topic = topicSelect?.value || '';
          userData.source = sourceSelect?.value || '';
          userData.notes = notesInput?.value || '';
          
          // Save in sessionStorage for persistence
          try {
            sessionStorage.setItem('consultationFormData', JSON.stringify(userData));
          } catch (e) {
            // Fail silently if sessionStorage is unavailable
          }
          
          // Update insurance type based on topic if needed
          if (userData.topic === 'new-insurance') {
            userData.insuranceType = 'new-health';
          } else if (userData.topic === 'health-insurance') {
            userData.insuranceType = 'health';
          } else if (userData.topic === '3rd-pillar' || userData.topic === 'pension-planning') {
            userData.insuranceType = 'pension';
          } else if (userData.topic === 'liability-insurance' || userData.topic === 'legal-insurance') {
            userData.insuranceType = 'liability';
          }
        }
        
        // Navigate to next step
        goToStep(nextStep);
        
        // Reset processing flag after short delay
        setTimeout(() => {
          isProcessing = false;
        }, 300);
      });
    });
    
    // Previous buttons handler
    document.querySelectorAll('.modal-prev-btn').forEach(button => {
      button.addEventListener('click', function(this: HTMLElement) {
        const currentStep = parseInt(this.getAttribute('data-current-step') || '2');
        const prevStep = currentStep - 1;
        goToStep(prevStep);
      });
    });
    
    // Set up modal open/close event listeners to manage resources
    const closeButton = document.getElementById('close-modal-btn');
    if (closeButton) {
      closeButton.addEventListener('click', function() {
        const modal = document.getElementById('consultation-modal');
        if (modal) {
          modal.classList.add('hidden');
          document.body.classList.remove('modal-open');
          
          // Dispatch custom event for cleanup
          document.dispatchEvent(new CustomEvent('modalClosed', {
            detail: { modalId: 'consultation-modal' }
          }));
        }
      });
    }
    
    // Handle backdrop clicks
    const backdrop = document.querySelector('[data-modal-backdrop="true"]');
    if (backdrop) {
      backdrop.addEventListener('click', (event) => {
        // Only close if clicking directly on the backdrop
        if (event.target === backdrop) {
          backdrop.classList.add('hidden');
          document.body.classList.remove('modal-open');
          
          // Dispatch custom event for cleanup
          document.dispatchEvent(new CustomEvent('modalClosed', {
            detail: { modalId: 'consultation-modal' }
          }));
        }
      });
    }
    
    // Listen for custom consultation modal open events
    document.addEventListener('click', function(e) {
      // Check if clicked element has data-open-consultation attribute
      const target = e.target as HTMLElement;
      if (target && (target.hasAttribute('data-open-consultation') || target.closest('[data-open-consultation]'))) {
        e.preventDefault();
        const modal = document.getElementById('consultation-modal');
        if (modal) {
          modal.classList.remove('hidden');
          document.body.classList.add('modal-open');
          
          // Reset to first step
          goToStep(1);
          
          // Dispatch custom event for setup
          document.dispatchEvent(new CustomEvent('modalOpened', {
            detail: { modalId: 'consultation-modal' }
          }));
        }
      }
    });
    
    // Clean up any resources when modal is closed
    document.addEventListener('modalClosed', function(e: Event) {
      // Type assertion for custom event
      const customEvent = e as CustomEvent<{modalId: string}>;
      
      if (customEvent.detail?.modalId === 'consultation-modal') {
        try {
          // Remove any Cal iframes to free up resources
          const calIframes = document.querySelectorAll('iframe[src*="cal.com"]');
          calIframes.forEach(iframe => {
            iframe.remove();
          });
          
          // Reset all steps to initial state
          document.querySelectorAll('.modal-step').forEach((step, index) => {
            if (index === 0) {
              step.classList.remove('hidden');
              step.classList.add('active');
            } else {
              step.classList.add('hidden');
              step.classList.remove('active');
            }
          });
          
          // Reset indicators
          document.querySelectorAll('.modal-step-indicator .step').forEach((indicator, index) => {
            const currentStep = index + 1;
            const circle = indicator.querySelector('.w-4');
            const line = indicator.querySelector('.h-1');
            
            if (currentStep === 1) {
              indicator.classList.add('active');
              indicator.classList.remove('completed');
              
              if (circle) {
                circle.className = 'w-4 h-4 flex items-center justify-center rounded-full bg-white border border-red-600 text-xs';
              }
              
              if (line) {
                line.className = 'h-1 bg-red-600 flex-grow rounded-full';
              }
            } else {
              indicator.classList.remove('active', 'completed');
              
              if (circle) {
                circle.className = 'w-4 h-4 flex items-center justify-center rounded-full bg-white border border-gray-300 text-gray-400 text-xs';
              }
              
              if (line) {
                line.className = 'h-1 bg-gray-300 flex-grow rounded-full';
              }
            }
          });
        } catch (e) {
          // Silent fail
        }
      }
    });
  });
</script>

<style>
  /* Base modal styling */
  .modal-content {
    max-height: 90vh;
    overflow-y: auto;
    scrollbar-width: thin;
  }
  
  /* Progress indicator styling */
  .modal-step-indicator .step.completed .h-1 {
    background-color: #dc2626;
  }
  
  .modal-step-indicator .step.completed .w-4 {
    background-color: #dc2626;
    border-color: #dc2626;
    color: white;
  }
  
  .modal-step-indicator .step.active .w-4 {
    border-color: #dc2626;
  }
  
  /* Step transitions */
  .modal-step {
    transition: opacity 0.3s ease;
  }
  
  .modal-step.active {
    animation: fadeIn 0.3s ease;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Mobile optimizations */
  @media (max-width: 640px) {
    .modal-content {
      max-height: 85vh;
      padding: 1rem !important;
    }
    
    .modal-step-indicator {
      margin-bottom: 1rem;
    }
    
    .modal-step-indicator .w-4 {
      width: 0.875rem;
      height: 0.875rem;
      font-size: 0.625rem;
    }
    
    .modal-step-indicator .h-1 {
      height: 0.125rem;
    }
    
    .modal-steps {
      margin-top: 0.5rem;
    }
  }
  
  /* Fix for Cal.com calendar width */
  :global(#cal-booking-placeholder) {
    width: 100%;
    overflow: hidden;
  }
  
  :global(#cal-booking-placeholder iframe) {
    width: 100% !important;
    border: none !important;
    min-height: 600px;
  }
</style>

<script is:inline>
  // Cal.com type definitions
  if (typeof window !== 'undefined') {
    window.Cal = window.Cal || {};
    window.closeConsultationModal = window.closeConsultationModal || function() {};
    window.openConsultationModal = window.openConsultationModal || function() {};
  }
</script> 