---
// HowTo Schema Component for insurance-related tutorial content
interface Step {
  name: string;
  text: string;
  url?: string;
  image?: string;
}

interface Tool {
  name: string;
  description?: string;
}

interface Props {
  name: string;
  description: string;
  totalTime?: string; // Format: "PT2H30M" (2 hours, 30 minutes)
  image?: string;
  steps: Step[];
  tools?: Tool[];
  estimatedCost?: {
    currency: string;
    value: string;
  };
  supply?: string[];
  datePublished?: string;
  dateModified?: string;
}

const { 
  name, 
  description, 
  totalTime, 
  image, 
  steps, 
  tools = [], 
  estimatedCost, 
  supply = [],
  datePublished,
  dateModified
} = Astro.props;

// Build the HowTo schema
const schema: any = {
  "@context": "https://schema.org",
  "@type": "HowTo",
  "name": name,
  "description": description,
  "step": steps.map((step, index) => ({
    "@type": "HowToStep",
    "url": step.url || `${Astro.url.toString()}#step-${index + 1}`,
    "name": step.name,
    "itemListElement": {
      "@type": "HowToDirection",
      "text": step.text
    },
    "position": index + 1,
    ...(step.image && { "image": step.image })
  }))
};

// Add optional properties if they exist
if (totalTime) schema.totalTime = totalTime;
if (image) schema.image = image;

if (tools.length > 0) {
  schema.tool = tools.map(tool => ({
    "@type": "HowToTool",
    "name": tool.name,
    ...(tool.description && { "description": tool.description })
  }));
}

if (supply.length > 0) {
  schema.supply = supply.map(item => ({
    "@type": "HowToSupply",
    "name": item
  }));
}

if (estimatedCost) {
  schema.estimatedCost = {
    "@type": "MonetaryAmount",
    "currency": estimatedCost.currency,
    "value": estimatedCost.value
  };
}

// Add dates if provided for seasonal freshness
if (datePublished) schema.datePublished = datePublished;
if (dateModified) schema.dateModified = dateModified;
---

<script type="application/ld+json" set:html={JSON.stringify(schema)}></script> 