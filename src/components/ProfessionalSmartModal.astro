---
// Professional Smart Modal v2.0 - Clean, Corporate Design
// Based on modal-redesign-improvements.md specifications
---

<!-- Professional Smart Modal Container -->
<div id="professional-smart-modal-root"></div>

<!-- React 18 CDN -->
<script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>

<!-- Lucide React Icons CDN -->
<script src="https://unpkg.com/lucide-react@latest/dist/umd/lucide-react.js"></script>

<script>
(function() {
  'use strict';
  
  const { React, ReactDOM } = window;
  const { useState, useEffect, useCallback } = React;
  const { 
    Phone, FileText, Users, CheckCircle, AlertCircle, TrendingDown, 
    Star, Calendar, Mail, Clock, Shield, Globe, Home, Search, 
    HelpCircle, Eye, ArrowRight, ChevronLeft, X 
  } = window.LucideReact || {};

  // Robert's Authority Header Component
  const RobertHeader = () => React.createElement('div', {
    className: 'robert-header'
  },
    React.createElement('div', { className: 'robert-avatar-wrapper' },
      React.createElement('img', {
        src: 'https://res.cloudinary.com/dphbnwjtx/image/upload/v1740666308/robert-kolar-advisor.jpg',
        alt: 'Robert Kolar',
        className: 'robert-avatar',
        onError: (e) => { e.target.src = 'https://via.placeholder.com/56x56/EF4444/white?text=RK'; }
      })
    ),
    React.createElement('div', { className: 'robert-info' },
      React.createElement('div', { className: 'robert-name' }, 'Robert Kolar, FINMA Registered Advisor'),
      React.createElement('div', { className: 'robert-credentials' }, 'ðŸ‡¬ðŸ‡§ English â€¢ ðŸ‡©ðŸ‡ª Deutsch â€¢ ðŸ‡«ðŸ‡· FranÃ§ais'),
      React.createElement('div', { className: 'robert-rating' },
        React.createElement(Star, { className: 'icon-sm', fill: 'currentColor' }),
        React.createElement('span', null, '4.9/5 (500+ reviews)')
      )
    )
  );

  // Situation Options with Lucide Icons
  const situationOptions = [
    { 
      id: 'new-to-switzerland', 
      icon: Home, 
      iconColor: '#EF4444',
      label: 'I just moved to Switzerland', 
      complexity: 9 
    },
    { 
      id: 'switch-save', 
      icon: TrendingDown, 
      iconColor: '#10B981',
      label: 'I want to switch & save money', 
      complexity: 8 
    },
    { 
      id: 'family', 
      icon: Users, 
      iconColor: '#3B82F6',
      label: 'I need advice for my family', 
      complexity: 8 
    },
    { 
      id: 'review', 
      icon: Search, 
      iconColor: '#8B5CF6',
      label: 'I want to review my coverage', 
      complexity: 5 
    },
    { 
      id: 'cross-border', 
      icon: Globe, 
      iconColor: '#F59E0B',
      label: "I'm a cross-border worker", 
      complexity: 9 
    },
    { 
      id: 'comparing', 
      icon: Eye, 
      iconColor: '#6B7280',
      label: 'Just comparing options', 
      complexity: 3 
    }
  ];

  // Professional Smart Modal Component
  const ProfessionalSmartModal = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [currentStep, setCurrentStep] = useState('qualification');
    const [userData, setUserData] = useState({});
    const [formData, setFormData] = useState({ name: '', email: '', phone: '' });

    const openModal = useCallback(() => {
      setIsOpen(true);
      setCurrentStep('qualification');
      document.body.style.overflow = 'hidden';
    }, []);

    const closeModal = useCallback(() => {
      setIsOpen(false);
      document.body.style.overflow = 'auto';
    }, []);

    const goToStep = useCallback((step) => {
      setCurrentStep(step);
    }, []);

    const handleSituationSelect = useCallback((option) => {
      setUserData({
        situation: option.id,
        complexityScore: option.complexity
      });
      setCurrentStep('value');
    }, []);

    const handleBookingInfoSubmit = useCallback((e) => {
      e.preventDefault();
      if (formData.name && formData.email && formData.phone) {
        setUserData(prev => ({ ...prev, ...formData }));
        setCurrentStep('calendar');
      }
    }, [formData]);

    const handleSelfServiceSubmit = useCallback((e) => {
      e.preventDefault();
      if (formData.name && formData.email) {
        setUserData(prev => ({ ...prev, ...formData }));
        setCurrentStep('self-service-confirmation');
      }
    }, [formData]);

    // Global modal control
    useEffect(() => {
      window.openSmartModal = openModal;
      window.closeSmartModal = closeModal;

      const handleCTAClick = (e) => {
        const button = e.target.closest('button, a');
        if (!button) return;
        
        const text = button.textContent?.toLowerCase() || '';
        const isModalTrigger = text.includes('consultation') || 
                              text.includes('contact us') ||
                              text.includes('get advice') ||
                              text.includes('book a call') ||
                              text.includes('free advice') ||
                              text.includes('get started');
        
        if (isModalTrigger) {
          e.preventDefault();
          e.stopPropagation();
          openModal();
        }
      };

      document.addEventListener('click', handleCTAClick, true);
      
      return () => {
        document.removeEventListener('click', handleCTAClick, true);
        delete window.openSmartModal;
        delete window.closeSmartModal;
      };
    }, [openModal, closeModal]);

    if (!isOpen) return null;

    // Step 1: Qualification
    const renderQualificationStep = () => React.createElement('div', { className: 'modal-step' },
      React.createElement(RobertHeader),
      React.createElement('div', { className: 'step-content' },
        React.createElement('div', { className: 'step-header' },
          React.createElement('h1', { className: 'step-title' }, "What's your situation?"),
          React.createElement('p', { className: 'step-subtitle' }, "Personal, English-speaking advice. Free & no obligation."),
          React.createElement('p', { className: 'step-question' }, "What brings you here today?")
        ),
        
        React.createElement('div', { className: 'social-proof-bar' },
          React.createElement('div', { className: 'social-proof-item' },
            React.createElement(Users, { className: 'social-proof-icon' }),
            React.createElement('span', null, 
              React.createElement('span', { className: 'social-proof-value' }, '12'),
              ' booked today'
            )
          ),
          React.createElement('div', { className: 'social-proof-item' },
            React.createElement(TrendingDown, { className: 'social-proof-icon' }),
            React.createElement('span', null, 
              'Avg savings: ',
              React.createElement('span', { className: 'social-proof-value' }, 'CHF 1,847')
            )
          ),
          React.createElement('div', { className: 'social-proof-item' },
            React.createElement(Star, { className: 'social-proof-icon' }),
            React.createElement('span', null, 
              React.createElement('span', { className: 'social-proof-value' }, '4.9/5'),
              ' (500+ reviews)'
            )
          )
        ),

        React.createElement('div', { className: 'situation-options' },
          situationOptions.map((option) =>
            React.createElement('div', {
              key: option.id,
              className: `situation-card ${option.id === 'new-to-switzerland' ? 'highlighted' : ''}`,
              onClick: () => handleSituationSelect(option)
            },
              option.id === 'new-to-switzerland' && React.createElement('div', { className: 'recommended-badge' }, 'RECOMMENDED'),
              React.createElement('div', { className: 'situation-card-icon', style: { color: option.iconColor } },
                React.createElement(option.icon, { className: 'icon-lg' })
              ),
              React.createElement('div', { className: 'situation-card-content' },
                React.createElement('div', { className: 'situation-card-label' }, option.label),
                React.createElement(ArrowRight, { className: 'situation-card-arrow' })
              )
            )
          )
        ),

        React.createElement('div', { className: 'step-footer' }, '100% free â€¢ No obligation')
      )
    );

    // Step 2: Value Demonstration (Side-by-side)
    const renderValueStep = () => {
      const isHighComplexity = userData.complexityScore >= 7;
      
      return React.createElement('div', { className: 'modal-step' },
        React.createElement(RobertHeader),
        React.createElement('div', { className: 'step-content' },
          React.createElement('button', {
            className: 'back-button',
            onClick: () => goToStep('qualification')
          },
            React.createElement(ChevronLeft, { className: 'icon-sm' }),
            'Back'
          ),
          
          React.createElement('div', { className: 'step-header' },
            React.createElement('h2', { className: 'step-title' }, 
              `Based on your situation: ${userData.situation?.replace(/-/g, ' ')}`
            )
          ),

          React.createElement('div', { className: 'value-comparison-container' },
            // Expert Guidance Card
            React.createElement('div', { className: 'comparison-card expert' },
              React.createElement('div', { className: 'card-header' },
                React.createElement('div', { className: 'card-icon expert' },
                  React.createElement(Phone, { className: 'icon-lg' })
                ),
                React.createElement('div', null,
                  React.createElement('div', { className: 'card-title' }, 'EXPERT GUIDANCE'),
                  React.createElement('div', { className: 'card-subtitle' }, '15-minute call')
                )
              ),
              
              React.createElement('div', { className: 'benefits-list' },
                React.createElement('div', { className: 'benefit-item' },
                  React.createElement(CheckCircle, { className: 'benefit-icon check' }),
                  React.createElement('div', { className: 'benefit-text' }, 'Personal strategy')
                ),
                React.createElement('div', { className: 'benefit-item' },
                  React.createElement(CheckCircle, { className: 'benefit-icon check' }),
                  React.createElement('div', { className: 'benefit-text' }, 'Hidden discounts')
                ),
                React.createElement('div', { className: 'benefit-item' },
                  React.createElement(CheckCircle, { className: 'benefit-icon check' }),
                  React.createElement('div', { className: 'benefit-text' }, '2026 planning')
                )
              ),

              React.createElement('div', { className: 'savings-box expert' },
                React.createElement('div', { className: 'savings-label' }, 'Typically saves'),
                React.createElement('div', { className: 'savings-amount' }, 'CHF 1,500-2,800')
              ),

              React.createElement('button', {
                className: 'card-cta primary',
                onClick: () => goToStep('booking-info')
              },
                'BOOK CALL',
                React.createElement(ArrowRight, { className: 'icon-sm' })
              )
            ),

            // Self-Service Card
            React.createElement('div', { className: 'comparison-card self-service' },
              React.createElement('div', { className: 'card-header' },
                React.createElement('div', { className: 'card-icon self-service' },
                  React.createElement(FileText, { className: 'icon-lg' })
                ),
                React.createElement('div', null,
                  React.createElement('div', { className: 'card-title' }, 'SELF-SERVICE'),
                  React.createElement('div', { className: 'card-subtitle' }, 'Get 3 quotes')
                )
              ),
              
              React.createElement('div', { className: 'benefits-list' },
                React.createElement('div', { className: 'benefit-item' },
                  React.createElement('div', { className: 'benefit-bullet' }, 'â€¢'),
                  React.createElement('div', { className: 'benefit-text' }, 'Standard rates')
                ),
                React.createElement('div', { className: 'benefit-item' },
                  React.createElement('div', { className: 'benefit-bullet' }, 'â€¢'),
                  React.createElement('div', { className: 'benefit-text' }, 'Basic comparison')
                ),
                React.createElement('div', { className: 'benefit-item' },
                  React.createElement('div', { className: 'benefit-bullet' }, 'â€¢'),
                  React.createElement('div', { className: 'benefit-text' }, 'Email delivery')
                )
              ),

              React.createElement('div', { className: 'savings-box warning' },
                React.createElement('div', { className: 'savings-label' }, 'May miss'),
                React.createElement('div', { className: 'savings-amount' }, 'CHF 800-1,500')
              ),

              React.createElement('button', {
                className: 'card-cta secondary',
                onClick: () => goToStep('self-service')
              },
                'GET QUOTES',
                React.createElement(ArrowRight, { className: 'icon-sm' })
              )
            )
          )
        )
      );
    };

    // Step 3A: Booking Info
    const renderBookingInfoStep = () => React.createElement('div', { className: 'modal-step' },
      React.createElement(RobertHeader),
      React.createElement('div', { className: 'step-content' },
        React.createElement('button', {
          className: 'back-button',
          onClick: () => goToStep('value')
        },
          React.createElement(ChevronLeft, { className: 'icon-sm' }),
          'Back'
        ),

        React.createElement('div', { className: 'booking-info-container' },
          React.createElement('div', { className: 'booking-headline' },
            React.createElement(Calendar, { className: 'icon-lg' }),
            "Let's schedule your call"
          ),
          React.createElement('p', { className: 'booking-description' },
            `This will be a 15-minute call where we'll review your ${userData.situation?.replace(/-/g, ' ')} and find the best rates.`
          ),

          React.createElement('div', { className: 'expectations-box' },
            React.createElement('div', { className: 'expectations-title' }, "What we'll cover:"),
            React.createElement('div', { className: 'expectations-list' },
              React.createElement('div', { className: 'expectations-item' },
                React.createElement(CheckCircle, { className: 'icon-sm' }),
                'Your situation'
              ),
              React.createElement('div', { className: 'expectations-item' },
                React.createElement(CheckCircle, { className: 'icon-sm' }),
                'Best rates'
              ),
              React.createElement('div', { className: 'expectations-item' },
                React.createElement(CheckCircle, { className: 'icon-sm' }),
                'Strategy'
              )
            )
          ),

          React.createElement('form', { onSubmit: handleBookingInfoSubmit },
            React.createElement('div', { className: 'form-field' },
              React.createElement('label', { className: 'form-label' }, 'Name'),
              React.createElement('input', {
                type: 'text',
                className: 'form-input',
                value: formData.name,
                onChange: (e) => setFormData(prev => ({ ...prev, name: e.target.value })),
                placeholder: 'John Doe',
                required: true
              })
            ),
            React.createElement('div', { className: 'form-field' },
              React.createElement('label', { className: 'form-label' }, 'Email'),
              React.createElement('input', {
                type: 'email',
                className: 'form-input',
                value: formData.email,
                onChange: (e) => setFormData(prev => ({ ...prev, email: e.target.value })),
                placeholder: 'john@example.com',
                required: true
              })
            ),
            React.createElement('div', { className: 'form-field' },
              React.createElement('label', { className: 'form-label' }, 'Phone'),
              React.createElement('div', { className: 'form-helper' }, '(for appointment reminder)'),
              React.createElement('input', {
                type: 'tel',
                className: 'form-input',
                value: formData.phone,
                onChange: (e) => setFormData(prev => ({ ...prev, phone: e.target.value })),
                placeholder: '+41 79 123 4567',
                required: true
              })
            ),

            React.createElement('button', {
              type: 'submit',
              className: 'continue-button'
            },
              'CONTINUE TO CALENDAR',
              React.createElement(ArrowRight, { className: 'icon-sm' })
            )
          ),

          React.createElement('div', { className: 'trust-badges' },
            React.createElement('div', { className: 'trust-badge' },
              React.createElement(CheckCircle, { className: 'icon-sm' }),
              'Free & no obligation'
            ),
            React.createElement('div', { className: 'trust-badge' },
              React.createElement(CheckCircle, { className: 'icon-sm' }),
              'Easy to reschedule'
            )
          )
        )
      )
    );

    // Step 3B: Calendar (Cal.com Integration)
    const renderCalendarStep = () => React.createElement('div', { className: 'modal-step' },
      React.createElement(RobertHeader),
      React.createElement('div', { className: 'step-content' },
        React.createElement('div', { className: 'calendar-container' },
          React.createElement('div', { className: 'calendar-header' },
            React.createElement('div', { className: 'calendar-title' },
              React.createElement(Calendar, { className: 'icon-lg' }),
              'Pick your time'
            ),
            React.createElement('div', { className: 'calendar-subtitle' },
              'Times shown in Europe/Zurich timezone'
            )
          ),

          React.createElement('div', { className: 'calendar-embed-wrapper' },
            React.createElement('div', { 
              style: { 
                textAlign: 'center', 
                padding: '40px',
                color: '#6B7280' 
              } 
            },
              React.createElement('p', null, 'Cal.com calendar would load here'),
              React.createElement('p', { style: { fontSize: '14px', marginTop: '8px' } }, 
                'Integration requires proper Cal.com setup'
              ),
              React.createElement('button', {
                onClick: () => {
                  // Simulate calendar booking
                  setCurrentStep('confirmation');
                },
                style: {
                  marginTop: '20px',
                  padding: '12px 24px',
                  background: '#EF4444',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer'
                }
              }, 'Simulate Booking (Demo)')
            )
          ),

          React.createElement('div', { className: 'calendar-trust-badges' },
            React.createElement('div', { className: 'trust-badge' },
              React.createElement(Shield, { className: 'icon-sm' }),
              'Free'
            ),
            React.createElement('div', { className: 'trust-badge' },
              React.createElement(Phone, { className: 'icon-sm' }),
              'Video or phone'
            ),
            React.createElement('div', { className: 'trust-badge' },
              React.createElement(Clock, { className: 'icon-sm' }),
              'Easy to reschedule'
            )
          )
        )
      )
    );

    // Step 4: Self-Service Form
    const renderSelfServiceStep = () => React.createElement('div', { className: 'modal-step' },
      React.createElement(RobertHeader),
      React.createElement('div', { className: 'step-content' },
        React.createElement('button', {
          className: 'back-button',
          onClick: () => goToStep('value')
        },
          React.createElement(ChevronLeft, { className: 'icon-sm' }),
          'Back'
        ),

        React.createElement('div', { className: 'self-service-container' },
          React.createElement('div', { className: 'self-service-header' },
            React.createElement('div', { className: 'self-service-title' },
              React.createElement(FileText, { className: 'icon-lg' }),
              'Get your personalized quotes'
            ),
            React.createElement('p', { className: 'self-service-description' },
              "We'll email you 3 best insurers for your situation"
            )
          ),

          React.createElement('form', { onSubmit: handleSelfServiceSubmit },
            React.createElement('div', { className: 'form-field' },
              React.createElement('label', { className: 'form-label' }, 'Name'),
              React.createElement('input', {
                type: 'text',
                className: 'form-input',
                value: formData.name,
                onChange: (e) => setFormData(prev => ({ ...prev, name: e.target.value })),
                required: true
              })
            ),
            React.createElement('div', { className: 'form-field' },
              React.createElement('label', { className: 'form-label' }, 'Email'),
              React.createElement('input', {
                type: 'email',
                className: 'form-input',
                value: formData.email,
                onChange: (e) => setFormData(prev => ({ ...prev, email: e.target.value })),
                required: true
              })
            ),

            React.createElement('button', {
              type: 'submit',
              className: 'continue-button'
            },
              'GET MY QUOTES',
              React.createElement(ArrowRight, { className: 'icon-sm' })
            )
          ),

          React.createElement('div', { className: 'conversion-cta' },
            React.createElement('div', { className: 'conversion-cta-text' },
              React.createElement('span', { style: { fontSize: '16px' } }, 'ðŸ’¡'),
              ' Want faster, personalized results?'
            ),
            React.createElement('button', {
              className: 'conversion-cta-button',
              onClick: () => goToStep('booking-info')
            },
              'Book 5-min call instead'
            )
          )
        )
      )
    );

    // Step 5: Confirmation
    const renderConfirmationStep = () => React.createElement('div', { className: 'modal-step' },
      React.createElement(RobertHeader),
      React.createElement('div', { className: 'step-content' },
        React.createElement('div', { className: 'confirmation-container' },
          React.createElement('div', { className: 'confirmation-icon' },
            React.createElement(CheckCircle, { className: 'icon-xl' })
          ),
          React.createElement('h2', { className: 'confirmation-title' }, 'Booking Confirmed!'),

          React.createElement('div', { className: 'booking-details-box' },
            React.createElement('div', { className: 'booking-detail-row' },
              React.createElement(Calendar, { className: 'booking-detail-icon' }),
              React.createElement('span', { className: 'booking-detail-text' }, 'Next available: Today or Tomorrow')
            ),
            React.createElement('div', { className: 'booking-detail-row' },
              React.createElement(Clock, { className: 'booking-detail-icon' }),
              React.createElement('span', { className: 'booking-detail-text' }, '15 minutes')
            ),
            React.createElement('div', { className: 'booking-detail-row' },
              React.createElement(Mail, { className: 'booking-detail-icon' }),
              React.createElement('span', { className: 'booking-detail-text' }, 'Video call link via email')
            )
          ),

          React.createElement('div', { className: 'next-steps' },
            React.createElement('div', { className: 'next-steps-title' }, "What's next:"),
            React.createElement('div', { className: 'step-item' },
              React.createElement('div', { className: 'step-number' }, '1'),
              React.createElement('div', { className: 'step-content' },
                React.createElement('div', { className: 'step-text' }, 'Check your email for calendar invite')
              )
            ),
            React.createElement('div', { className: 'step-item' },
              React.createElement('div', { className: 'step-number' }, '2'),
              React.createElement('div', { className: 'step-content' },
                React.createElement('div', { className: 'step-text' }, '(Optional) Reply with quick info'),
                React.createElement('div', { className: 'step-sublist' }, 'â€¢ Employment status â€¢ Coverage needed â€¢ Start date')
              )
            ),
            React.createElement('div', { className: 'step-item' },
              React.createElement('div', { className: 'step-number' }, '3'),
              React.createElement('div', { className: 'step-content' },
                React.createElement('div', { className: 'step-text' }, 'Join the call - Robert will guide you')
              )
            )
          ),

          React.createElement('div', { className: 'confirmation-actions' },
            React.createElement('button', { className: 'confirmation-button primary' }, 'ADD TO CALENDAR'),
            React.createElement('button', { 
              className: 'confirmation-button secondary',
              onClick: closeModal
            }, 'CLOSE')
          ),

          React.createElement('div', { className: 'personal-note' },
            'Looking forward to helping you save money!',
            React.createElement('div', { className: 'personal-signature' }, '- Robert')
          )
        )
      )
    );

    // Self-Service Confirmation
    const renderSelfServiceConfirmation = () => React.createElement('div', { className: 'modal-step' },
      React.createElement(RobertHeader),
      React.createElement('div', { className: 'step-content' },
        React.createElement('div', { className: 'confirmation-container' },
          React.createElement('div', { className: 'confirmation-icon' },
            React.createElement(CheckCircle, { className: 'icon-xl' })
          ),
          React.createElement('h2', { className: 'confirmation-title' }, 'Request received!'),
          React.createElement('p', { style: { fontSize: '16px', color: '#6B7280', marginBottom: '24px' } },
            "We're preparing your quotes..."
          ),

          React.createElement('div', { className: 'self-service-next-steps' },
            React.createElement('h3', { style: { marginBottom: '16px' } }, "You'll receive:"),
            React.createElement('div', { style: { textAlign: 'left', marginBottom: '24px' } },
              React.createElement('div', { style: { marginBottom: '8px' } }, 'â€¢ Initial quotes within 2-3 hours'),
              React.createElement('div', { style: { marginBottom: '8px' } }, 'â€¢ Detailed comparison via email'),
              React.createElement('div', { style: { marginBottom: '8px' } }, 'â€¢ Optional follow-up call offer')
            ),
            React.createElement('p', { style: { fontSize: '14px', color: '#6B7280', marginBottom: '24px' } },
              `Check your email: ${formData.email}`
            )
          ),

          React.createElement('button', {
            className: 'confirmation-button primary',
            onClick: closeModal
          }, 'CLOSE')
        )
      )
    );

    return React.createElement('div', {
      className: 'modal-backdrop',
      onClick: (e) => e.target === e.currentTarget && closeModal()
    },
      React.createElement('div', { className: 'modal-container' },
        React.createElement('button', {
          onClick: closeModal,
          className: 'modal-close'
        },
          React.createElement(X, { className: 'icon-md' })
        ),
        
        currentStep === 'qualification' && renderQualificationStep(),
        currentStep === 'value' && renderValueStep(),
        currentStep === 'booking-info' && renderBookingInfoStep(),
        currentStep === 'calendar' && renderCalendarStep(),
        currentStep === 'self-service' && renderSelfServiceStep(),
        currentStep === 'confirmation' && renderConfirmationStep(),
        currentStep === 'self-service-confirmation' && renderSelfServiceConfirmation()
      )
    );
  };

  // Initialize modal
  function initModal() {
    if (typeof React === 'undefined' || typeof ReactDOM === 'undefined') {
      setTimeout(initModal, 100);
      return;
    }

    const container = document.getElementById('professional-smart-modal-root');
    if (container && ReactDOM) {
      const root = ReactDOM.createRoot ? ReactDOM.createRoot(container) : null;
      if (root) {
        root.render(React.createElement(ProfessionalSmartModal));
      } else {
        ReactDOM.render(React.createElement(ProfessionalSmartModal), container);
      }
    }
  }

  // Start when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initModal);
  } else {
    initModal();
  }
})();
</script>

<style>
/* Professional Smart Modal v2.0 - Corporate Design System */

/* CSS Variables - Clean Corporate Palette */
:root {
  --white: #FFFFFF;
  --bg-app: #FAFAFA;
  --bg-elevated: #F8F9FA;
  --bg-subtle: #F3F4F6;
  
  --text-primary: #1A1A1A;
  --text-secondary: #4B5563;
  --text-tertiary: #6B7280;
  
  --border-light: #E5E7EB;
  --border-medium: #D1D5DB;
  
  --red-primary: #EF4444;
  --red-hover: #DC2626;
  --red-subtle: #FEF2F2;
  
  --green-success: #10B981;
  --green-subtle: #D1FAE5;
  
  --amber-warning: #F59E0B;
  --amber-subtle: #FEF3C7;
  
  /* Spacing */
  --space-xs: 8px;
  --space-sm: 12px;
  --space-md: 16px;
  --space-lg: 24px;
  --space-xl: 32px;
  --space-2xl: 48px;
  
  /* Shadows - Neumorphic */
  --shadow-minimal: 0 1px 3px rgba(0, 0, 0, 0.04), 0 1px 2px rgba(0, 0, 0, 0.06);
  --shadow-standard: 0 2px 8px rgba(0, 0, 0, 0.04), 0 1px 3px rgba(0, 0, 0, 0.06);
  --shadow-elevated: 0 8px 24px rgba(0, 0, 0, 0.08), 0 4px 8px rgba(0, 0, 0, 0.04);
  --shadow-intense: 0 20px 40px rgba(0, 0, 0, 0.12), 0 8px 16px rgba(0, 0, 0, 0.08);
  
  /* Radius */
  --radius-sm: 8px;
  --radius-md: 12px;
  --radius-lg: 16px;
}

/* Modal Structure */
.modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(4px);
  z-index: 9999;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: var(--space-lg);
}

.modal-container {
  background: var(--white);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-intense);
  width: 100%;
  max-width: 900px;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;
  animation: modalEnter 0.2s ease-out;
}

.modal-close {
  position: absolute;
  top: var(--space-md);
  right: var(--space-md);
  z-index: 10;
  padding: var(--space-sm);
  background: transparent;
  border: none;
  border-radius: var(--radius-sm);
  color: var(--text-tertiary);
  cursor: pointer;
  transition: all 200ms ease;
}

.modal-close:hover {
  background: var(--bg-subtle);
  color: var(--text-primary);
}

/* Robert's Authority Header - Glassmorphic */
.robert-header {
  background: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(12px) saturate(180%);
  -webkit-backdrop-filter: blur(12px) saturate(180%);
  border-bottom: 1px solid var(--border-light);
  padding: var(--space-md) var(--space-2xl);
  display: flex;
  align-items: center;
  gap: var(--space-md);
}

.robert-avatar {
  width: 56px;
  height: 56px;
  border-radius: 50%;
  border: 2px solid var(--border-light);
  object-fit: cover;
}

.robert-info {
  flex: 1;
}

.robert-name {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 2px;
}

.robert-credentials {
  font-size: 13px;
  color: var(--text-secondary);
  margin-bottom: 4px;
}

.robert-rating {
  font-size: 12px;
  color: var(--text-tertiary);
  display: flex;
  align-items: center;
  gap: 4px;
}

/* Step Structure */
.modal-step {
  display: flex;
  flex-direction: column;
}

.step-content {
  padding: var(--space-2xl);
  flex: 1;
}

.step-header {
  text-align: center;
  margin-bottom: var(--space-xl);
}

.step-title {
  font-size: 28px;
  font-weight: 600;
  color: var(--text-primary);
  letter-spacing: -0.02em;
  line-height: 1.2;
  margin-bottom: var(--space-sm);
}

.step-subtitle {
  font-size: 16px;
  color: var(--text-secondary);
  margin-bottom: var(--space-md);
}

.step-question {
  font-size: 18px;
  font-weight: 600;
  color: var(--text-primary);
}

.step-footer {
  text-align: center;
  font-size: 14px;
  color: var(--text-tertiary);
  margin-top: var(--space-xl);
}

/* Back Button */
.back-button {
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  background: transparent;
  border: none;
  color: var(--red-primary);
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  padding: var(--space-sm) var(--space-md);
  border-radius: var(--radius-sm);
  margin-bottom: var(--space-lg);
  transition: all 200ms ease;
  width: fit-content;
}

.back-button:hover {
  background: var(--red-subtle);
}

/* Social Proof Bar */
.social-proof-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--space-md) var(--space-lg);
  border-top: 1px solid var(--border-light);
  border-bottom: 1px solid var(--border-light);
  margin: var(--space-xl) calc(-1 * var(--space-2xl)) var(--space-xl) calc(-1 * var(--space-2xl));
}

.social-proof-item {
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  font-size: 13px;
  color: var(--text-secondary);
}

.social-proof-icon {
  width: 16px;
  height: 16px;
  color: var(--text-tertiary);
}

.social-proof-value {
  font-weight: 600;
  color: var(--text-primary);
}

/* Situation Options */
.situation-options {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: var(--space-md);
  margin-bottom: var(--space-xl);
}

.situation-card {
  position: relative;
  background: var(--white);
  border: 2px solid var(--border-light);
  border-radius: var(--radius-md);
  padding: var(--space-lg);
  display: flex;
  align-items: center;
  gap: var(--space-md);
  cursor: pointer;
  transition: all 200ms ease;
  box-shadow: var(--shadow-minimal);
}

.situation-card:hover {
  border-color: var(--red-primary);
  box-shadow: var(--shadow-elevated);
  transform: translateY(-2px);
}

.situation-card.highlighted {
  border-color: var(--green-success);
  background: linear-gradient(135deg, #FFFFFF 0%, #F0FDF4 100%);
  box-shadow: var(--shadow-elevated);
}

.recommended-badge {
  position: absolute;
  top: -10px;
  left: 16px;
  background: var(--green-success);
  color: white;
  font-size: 11px;
  font-weight: 700;
  padding: 4px 10px;
  border-radius: 6px;
  letter-spacing: 0.3px;
}

.situation-card-icon {
  width: 48px;
  height: 48px;
  border-radius: var(--radius-sm);
  background: var(--bg-subtle);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.situation-card-content {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.situation-card-label {
  font-size: 15px;
  font-weight: 500;
  color: var(--text-primary);
}

.situation-card-arrow {
  color: var(--text-tertiary);
  transition: all 200ms ease;
}

.situation-card:hover .situation-card-arrow {
  color: var(--red-primary);
  transform: translateX(4px);
}

/* Value Comparison */
.value-comparison-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: var(--space-lg);
  margin: var(--space-xl) 0;
}

.comparison-card {
  background: var(--white);
  border: 2px solid var(--border-light);
  border-radius: var(--radius-md);
  padding: var(--space-xl) var(--space-lg);
  display: flex;
  flex-direction: column;
  gap: var(--space-lg);
  box-shadow: var(--shadow-standard);
  transition: all 200ms ease;
}

.comparison-card:hover {
  box-shadow: var(--shadow-elevated);
  transform: translateY(-4px);
}

.comparison-card.expert {
  border-color: var(--red-primary);
  background: linear-gradient(135deg, #FFFFFF 0%, #FEF2F2 100%);
}

.comparison-card.self-service {
  border-color: var(--border-medium);
}

.card-header {
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  padding-bottom: var(--space-md);
  border-bottom: 1px solid var(--border-light);
}

.card-icon {
  width: 48px;
  height: 48px;
  border-radius: var(--radius-sm);
  background: var(--bg-subtle);
  display: flex;
  align-items: center;
  justify-content: center;
}

.card-icon.expert {
  background: var(--red-subtle);
  color: var(--red-primary);
}

.card-icon.self-service {
  background: var(--bg-subtle);
  color: var(--text-secondary);
}

.card-title {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
}

.card-subtitle {
  font-size: 13px;
  color: var(--text-tertiary);
}

.benefits-list {
  display: flex;
  flex-direction: column;
  gap: var(--space-sm);
  flex: 1;
}

.benefit-item {
  display: flex;
  align-items: flex-start;
  gap: var(--space-sm);
}

.benefit-icon {
  width: 20px;
  height: 20px;
  flex-shrink: 0;
  margin-top: 2px;
}

.benefit-icon.check {
  color: var(--green-success);
}

.benefit-bullet {
  width: 20px;
  height: 20px;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--text-tertiary);
  font-weight: bold;
  margin-top: 2px;
}

.benefit-text {
  font-size: 14px;
  color: var(--text-secondary);
  line-height: 1.5;
}

.savings-box {
  background: var(--bg-elevated);
  border: 1px solid var(--border-light);
  border-radius: var(--radius-sm);
  padding: var(--space-md);
  text-align: center;
}

.savings-box.expert {
  background: var(--green-subtle);
  border-color: var(--green-success);
}

.savings-box.warning {
  background: var(--amber-subtle);
  border-color: var(--amber-warning);
}

.savings-label {
  font-size: 12px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  color: var(--text-tertiary);
  margin-bottom: 4px;
}

.savings-amount {
  font-size: 18px;
  font-weight: 700;
  color: var(--text-primary);
}

.savings-box.expert .savings-amount {
  color: var(--green-success);
}

.savings-box.warning .savings-amount {
  color: var(--amber-warning);
}

.card-cta {
  width: 100%;
  height: 48px;
  border-radius: var(--radius-sm);
  font-size: 15px;
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-sm);
  cursor: pointer;
  transition: all 200ms ease;
  border: none;
}

.card-cta.primary {
  background: var(--red-primary);
  color: white;
  box-shadow: var(--shadow-minimal);
}

.card-cta.primary:hover {
  background: var(--red-hover);
  box-shadow: var(--shadow-standard);
  transform: translateY(-2px);
}

.card-cta.secondary {
  background: transparent;
  color: var(--text-secondary);
  border: 2px solid var(--border-medium);
}

.card-cta.secondary:hover {
  background: var(--bg-subtle);
  border-color: var(--border-light);
}

/* Form Styles */
.booking-info-container,
.self-service-container {
  max-width: 500px;
  margin: 0 auto;
}

.booking-headline,
.self-service-title {
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  font-size: 22px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: var(--space-sm);
  justify-content: center;
}

.booking-description,
.self-service-description {
  font-size: 15px;
  color: var(--text-secondary);
  line-height: 1.6;
  margin-bottom: var(--space-lg);
  text-align: center;
}

.expectations-box {
  background: var(--bg-elevated);
  border: 1px solid var(--border-light);
  border-radius: var(--radius-sm);
  padding: var(--space-md);
  margin-bottom: var(--space-xl);
}

.expectations-title {
  font-size: 14px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: var(--space-sm);
}

.expectations-list {
  display: flex;
  gap: var(--space-md);
  flex-wrap: wrap;
  font-size: 13px;
  color: var(--text-secondary);
}

.expectations-item {
  display: flex;
  align-items: center;
  gap: 6px;
}

.form-field {
  margin-bottom: var(--space-lg);
}

.form-label {
  display: block;
  font-size: 14px;
  font-weight: 500;
  color: var(--text-primary);
  margin-bottom: 6px;
}

.form-input {
  width: 100%;
  height: 48px;
  padding: 12px 16px;
  font-size: 15px;
  color: var(--text-primary);
  background: var(--white);
  border: 2px solid var(--border-light);
  border-radius: var(--radius-sm);
  transition: all 200ms ease;
}

.form-input:focus {
  outline: none;
  border-color: var(--red-primary);
  box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
}

.form-input::placeholder {
  color: var(--text-tertiary);
}

.form-helper {
  font-size: 12px;
  color: var(--text-tertiary);
  margin-top: 4px;
}

.continue-button {
  width: 100%;
  height: 56px;
  background: var(--red-primary);
  color: white;
  font-size: 16px;
  font-weight: 600;
  border: none;
  border-radius: var(--radius-sm);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-sm);
  margin: var(--space-xl) 0 var(--space-lg) 0;
  box-shadow: var(--shadow-standard);
  transition: all 200ms ease;
}

.continue-button:hover {
  background: var(--red-hover);
  box-shadow: var(--shadow-elevated);
  transform: translateY(-2px);
}

.trust-badges {
  display: flex;
  justify-content: center;
  gap: var(--space-lg);
  font-size: 13px;
  color: var(--text-tertiary);
}

.trust-badge {
  display: flex;
  align-items: center;
  gap: 6px;
}

/* Calendar Styles */
.calendar-container {
  padding: var(--space-2xl);
}

.calendar-header {
  text-align: center;
  margin-bottom: var(--space-lg);
}

.calendar-title {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-sm);
  font-size: 22px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: var(--space-sm);
}

.calendar-subtitle {
  font-size: 13px;
  color: var(--text-tertiary);
}

.calendar-embed-wrapper {
  background: var(--white);
  border: 2px solid var(--border-light);
  border-radius: var(--radius-md);
  padding: var(--space-md);
  margin-bottom: var(--space-lg);
  box-shadow: var(--shadow-standard);
  min-height: 500px;
}

.calendar-trust-badges {
  display: flex;
  justify-content: center;
  gap: var(--space-lg);
  font-size: 13px;
  color: var(--text-tertiary);
}

/* Self-Service Conversion CTA */
.conversion-cta {
  margin-top: var(--space-xl);
  padding: var(--space-lg);
  background: var(--bg-elevated);
  border: 1px solid var(--border-light);
  border-radius: var(--radius-sm);
  text-align: center;
}

.conversion-cta-text {
  font-size: 14px;
  color: var(--text-secondary);
  margin-bottom: var(--space-sm);
}

.conversion-cta-button {
  background: transparent;
  color: var(--red-primary);
  border: 2px solid var(--red-primary);
  padding: 10px 20px;
  border-radius: var(--radius-sm);
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  transition: all 200ms ease;
}

.conversion-cta-button:hover {
  background: var(--red-subtle);
}

/* Confirmation Styles */
.confirmation-container {
  padding: var(--space-2xl);
  text-align: center;
}

.confirmation-icon {
  width: 80px;
  height: 80px;
  margin: 0 auto 24px;
  background: var(--green-subtle);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 8px 16px rgba(16, 185, 129, 0.2);
}

.confirmation-icon svg {
  width: 48px;
  height: 48px;
  color: var(--green-success);
}

.confirmation-title {
  font-size: 28px;
  font-weight: 700;
  color: var(--text-primary);
  margin-bottom: var(--space-xl);
}

.booking-details-box {
  background: var(--bg-elevated);
  border: 2px solid var(--border-light);
  border-radius: var(--radius-md);
  padding: var(--space-lg);
  margin: 0 auto var(--space-xl);
  max-width: 500px;
  box-shadow: var(--shadow-minimal);
}

.booking-detail-row {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-sm);
  padding: var(--space-sm) 0;
  font-size: 15px;
  color: var(--text-secondary);
  border-bottom: 1px solid var(--border-light);
}

.booking-detail-row:last-child {
  border-bottom: none;
}

.booking-detail-icon {
  width: 20px;
  height: 20px;
  color: var(--text-tertiary);
}

.booking-detail-text {
  font-weight: 500;
  color: var(--text-primary);
}

.next-steps {
  max-width: 600px;
  margin: 0 auto var(--space-xl);
  text-align: left;
}

.next-steps-title {
  font-size: 18px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: var(--space-lg);
  text-align: center;
}

.step-item {
  display: flex;
  align-items: flex-start;
  gap: var(--space-md);
  margin-bottom: var(--space-lg);
}

.step-number {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: var(--red-subtle);
  color: var(--red-primary);
  font-weight: 700;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.step-content {
  flex: 1;
}

.step-text {
  font-size: 15px;
  color: var(--text-secondary);
  line-height: 1.6;
}

.step-sublist {
  margin-top: var(--space-sm);
  margin-left: var(--space-lg);
  font-size: 14px;
  color: var(--text-tertiary);
}

.confirmation-actions {
  display: flex;
  gap: var(--space-md);
  justify-content: center;
  margin-bottom: var(--space-xl);
}

.confirmation-button {
  padding: var(--space-sm) var(--space-lg);
  font-size: 15px;
  font-weight: 600;
  border-radius: var(--radius-sm);
  cursor: pointer;
  transition: all 200ms ease;
}

.confirmation-button.primary {
  background: var(--red-primary);
  color: white;
  border: none;
  box-shadow: var(--shadow-minimal);
}

.confirmation-button.primary:hover {
  background: var(--red-hover);
  box-shadow: var(--shadow-standard);
}

.confirmation-button.secondary {
  background: transparent;
  color: var(--text-secondary);
  border: 2px solid var(--border-medium);
}

.confirmation-button.secondary:hover {
  background: var(--bg-subtle);
}

.personal-note {
  font-size: 15px;
  color: var(--text-secondary);
  font-style: italic;
  max-width: 500px;
  margin: 0 auto;
  line-height: 1.6;
}

.personal-signature {
  margin-top: var(--space-sm);
  font-weight: 600;
  color: var(--text-primary);
  font-style: normal;
}

/* Icon Sizes */
.icon-sm { width: 16px; height: 16px; }
.icon-md { width: 20px; height: 20px; }
.icon-lg { width: 24px; height: 24px; }
.icon-xl { width: 32px; height: 32px; }

/* Animations */
@keyframes modalEnter {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
  .robert-header {
    padding: var(--space-sm) var(--space-lg);
  }
  
  .robert-avatar {
    width: 44px;
    height: 44px;
  }
  
  .robert-name {
    font-size: 14px;
  }
  
  .robert-credentials {
    font-size: 12px;
  }
  
  .step-content {
    padding: var(--space-lg);
  }
  
  .step-title {
    font-size: 24px;
  }
  
  .value-comparison-container {
    grid-template-columns: 1fr;
    gap: var(--space-md);
  }
  
  .social-proof-bar {
    flex-direction: column;
    gap: var(--space-sm);
    padding: var(--space-md) var(--space-lg);
    margin: var(--space-lg) calc(-1 * var(--space-lg)) var(--space-lg) calc(-1 * var(--space-lg));
  }
  
  .social-proof-item {
    font-size: 12px;
  }
  
  .situation-options {
    grid-template-columns: 1fr;
  }
  
  .trust-badges {
    flex-direction: column;
    align-items: center;
    gap: var(--space-sm);
  }
  
  .calendar-container {
    padding: var(--space-lg);
  }
  
  .calendar-embed-wrapper {
    padding: var(--space-sm);
    min-height: 450px;
  }
  
  .calendar-trust-badges {
    flex-direction: column;
    align-items: center;
    gap: var(--space-sm);
  }
  
  .confirmation-actions {
    flex-direction: column;
  }
  
  .confirmation-button {
    width: 100%;
  }
  
  .modal-backdrop {
    padding: 0;
  }
  
  .modal-container {
    border-radius: 0;
    max-height: 100vh;
  }
}

/* High DPI displays */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  .robert-avatar {
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
  }
}

/* Reduced motion */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

/* Dark mode support (if needed) */
@media (prefers-color-scheme: dark) {
  :root {
    --white: #1F2937;
    --bg-app: #111827;
    --bg-elevated: #1F2937;
    --bg-subtle: #374151;
    --text-primary: #F9FAFB;
    --text-secondary: #D1D5DB;
    --text-tertiary: #9CA3AF;
    --border-light: #374151;
    --border-medium: #4B5563;
  }
}
</style>