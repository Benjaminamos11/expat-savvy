---
interface Props {
  term: string;
  definition: string;
  example?: string;
  relatedTerms?: string[];
  className?: string;
}

const { term, definition, example, relatedTerms, className = "" } = Astro.props;

// Schema for definition
const definitionSchema = {
  "@context": "https://schema.org",
  "@type": "DefinedTerm",
  "name": term,
  "description": definition,
  "inDefinedTermSet": "Swiss Health Insurance Glossary"
};
---

<!-- Definition Schema -->
<script type="application/ld+json" set:html={JSON.stringify(definitionSchema)}></script>

<!-- Definition Block -->
<div class={`definition-block bg-blue-50 border-l-4 border-blue-500 p-4 my-4 rounded-r-lg ${className}`}>
  <div class="flex items-start">
    <div class="flex-shrink-0">
      <svg class="h-5 w-5 text-blue-500 mt-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
    </div>
    <div class="ml-3 flex-1">
      <h4 class="text-lg font-semibold text-blue-900 mb-2">
        <dfn id={`definition-${term.toLowerCase().replace(/\s+/g, '-')}`}>
          {term}
        </dfn>
      </h4>
      <p class="text-blue-800 mb-2">{definition}</p>
      
      {example && (
        <div class="mt-2 p-2 bg-blue-100 rounded">
          <p class="text-sm text-blue-700">
            <strong>Example:</strong> {example}
          </p>
        </div>
      )}
      
      {relatedTerms && relatedTerms.length > 0 && (
        <div class="mt-2">
          <p class="text-sm text-blue-700">
            <strong>Related terms:</strong> {relatedTerms.join(', ')}
          </p>
        </div>
      )}
    </div>
  </div>
</div>

<style>
  .definition-block dfn {
    font-style: normal;
  }
</style> 