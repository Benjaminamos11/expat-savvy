---
// Get current page context for dynamic modal behavior
const currentPath = Astro.url.pathname;

// Determine intent based on URL path
let pageIntent = 'home';
if (currentPath.includes('/setup') || currentPath.includes('/new-health')) pageIntent = 'setup';
else if (currentPath.includes('/family') || currentPath.includes('/coverage')) pageIntent = 'family';  
else if (currentPath.includes('/change') || currentPath.includes('/switch')) pageIntent = 'change';
else if (currentPath.includes('/cheapest')) pageIntent = 'cheapest';
else if (currentPath.includes('/best')) pageIntent = 'best';
else if (currentPath.includes('/compare')) pageIntent = 'compare';
else if (currentPath.includes('/healthcare/all-insurances/')) pageIntent = 'provider';

// Detect city from URL for localization
let city = '';
const cityPatterns = ['zurich', 'basel', 'bern', 'geneva', 'lausanne', 'lugano', 'zug'];
for (const cityName of cityPatterns) {
  if (currentPath.includes(cityName)) {
    city = cityName;
    break;
  }
}

// Extract provider name for provider pages
let providerName = '';
if (pageIntent === 'provider') {
  const pathParts = currentPath.split('/');
  providerName = pathParts[pathParts.length - 1]?.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) || '';
}

const pageSlug = currentPath.split('/').filter(Boolean).pop() || '';
---

<!-- React Modal Container -->
<div id="smart-modal-root"></div>

<!-- React and ReactDOM from CDN -->
<script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>

<!-- Lucide React Icons -->
<script src="https://unpkg.com/lucide-react@latest/dist/umd/lucide-react.js"></script>

<script is:inline>
  // Wait for React to load
  function waitForReact(callback) {
    if (typeof React !== 'undefined' && typeof ReactDOM !== 'undefined' && typeof LucideReact !== 'undefined') {
      callback();
    } else {
      setTimeout(() => waitForReact(callback), 100);
    }
  }

  waitForReact(() => {
    console.log('🚀 React and dependencies loaded successfully');
    
    const { useState, useEffect, createElement: h } = React;
    const { X, ArrowLeft, ArrowRight, MapPin, Users, DollarSign, Scale, HelpCircle, Eye, Phone, Calendar, CheckCircle2, Sparkles } = LucideReact;

    const SmartModal = ({ isOpen, onClose, pageContext = {} }) => {
      const [currentStep, setCurrentStep] = useState('qualification');
      const [userData, setUserData] = useState({});
      const [formData, setFormData] = useState({ name: '', email: '', phone: '' });

      // Reset modal when opened
      useEffect(() => {
        if (isOpen) {
          setCurrentStep('qualification');
          setUserData({});
          setFormData({ name: '', email: '', phone: '' });
        }
      }, [isOpen]);

      // Close on ESC key and handle body overflow
      useEffect(() => {
        const handleKeyDown = (e) => {
          if (e.key === 'Escape' && isOpen) {
            onClose();
          }
        };
        
        if (isOpen) {
          document.addEventListener('keydown', handleKeyDown);
          document.body.style.overflow = 'hidden';
        }
        
        return () => {
          document.removeEventListener('keydown', handleKeyDown);
          document.body.style.overflow = '';
        };
      }, [isOpen, onClose]);

      const getStepOneConfig = (pageIntent) => {
        switch(pageIntent) {
          case 'setup':
            return {
              headline: "Welcome to Switzerland!",
              subline: "You have 3 months to register. Let's get started.",
              question: "What best describes your situation?",
              highlightedOption: 'new-to-switzerland',
              badge: 'RECOMMENDED FOR YOU'
            };
          
          case 'family':
            return {
              headline: "Let's optimize your family's coverage",
              subline: "Most families save CHF 1,200-2,800 with expert help",
              question: "Tell me about your situation:",
              highlightedOption: 'family',
              badge: 'SUGGESTED FOR FAMILIES'
            };
          
          case 'change':
            return {
              headline: "Ready to switch for 2026?",
              subline: "Switching deadline is 30 November 2025",
              question: "What's your goal?",
              highlightedOption: 'switch-save',
              badge: 'POPULAR CHOICE'
            };
          
          case 'compare':
            return {
              headline: "Comparing your options?",
              subline: "Let me help you choose the right one",
              question: "What brings you here?",
              highlightedOption: 'compare-options',
              badge: 'FASTEST WAY'
            };
          
          case 'provider':
            return {
              headline: `Interested in ${pageContext.providerName || 'this provider'}?`,
              subline: "Let's see if it's the best fit for you",
              question: "What's your interest?",
              highlightedOption: 'compare-options',
              badge: 'SMART APPROACH'
            };
          
          default:
            return {
              headline: "What's your situation?",
              subline: "Personal, English-speaking advice. Free & no obligation.",
              question: "What brings you here today?",
              highlightedOption: null,
              badge: null
            };
        }
      };

      const stepConfig = getStepOneConfig(pageContext.intent || 'home');

      const qualificationOptions = [
        { id: 'new-to-switzerland', icon: MapPin, title: 'I just moved to Switzerland', score: 9 },
        { id: 'family', icon: Users, title: 'I need family coverage', score: 8 },
        { id: 'switch-save', icon: DollarSign, title: 'I want to switch and save money', score: 6 },
        { id: 'compare-options', icon: Scale, title: "I'm comparing different options", score: 4 },
        { id: 'have-questions', icon: HelpCircle, title: 'I have specific questions', score: 3 },
        { id: 'just-browsing', icon: Eye, title: "I'm just browsing", score: 2 }
      ];

      const handleOptionSelect = (option) => {
        setUserData({
          situation: option.id,
          complexityScore: option.score
        });
        setCurrentStep('value');
      };

      const goToStep = (step) => {
        setCurrentStep(step);
      };

      const handleBookingSubmit = (e) => {
        e.preventDefault();
        if (formData.name && formData.email && formData.phone) {
          setUserData(prev => ({ ...prev, bookingData: formData }));
          setCurrentStep('success');
        }
      };

      const getValueStep = () => {
        const { complexityScore } = userData;
        if (complexityScore >= 7) return 'value-high';
        if (complexityScore >= 4) return 'value-medium';
        return 'value-low';
      };

      if (!isOpen) return null;

      return h('div', {
        className: "fixed inset-0 bg-black bg-opacity-60 z-50 flex items-center justify-center p-0 lg:p-4",
        style: { backdropFilter: 'blur(4px)' }
      },
        h('div', {
          className: "bg-white w-full h-full lg:max-w-5xl lg:max-h-[90vh] lg:rounded-2xl lg:h-auto overflow-y-auto relative shadow-2xl"
        },
          // Close Button
          h('button', {
            onClick: onClose,
            className: "absolute top-4 right-4 z-10 p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors min-w-[44px] min-h-[44px] flex items-center justify-center",
            'aria-label': "Close modal"
          }, h(X, { className: "w-6 h-6" })),

          h('div', { className: "p-8 lg:p-12" },
            
            // Step 1: Qualification
            currentStep === 'qualification' && h('div', { className: "space-y-8" },
              h('div', { className: "text-center" },
                h('h2', { className: "text-3xl lg:text-4xl font-bold text-gray-900 mb-4" }, stepConfig.headline),
                h('p', { className: "text-lg text-gray-600 mb-2" }, stepConfig.subline),
                h('p', { className: "text-xl font-semibold text-gray-900" }, stepConfig.question)
              ),

              h('div', { className: "grid grid-cols-1 md:grid-cols-2 gap-4 max-w-4xl mx-auto" },
                ...qualificationOptions.map(option => {
                  const IconComponent = option.icon;
                  const isHighlighted = option.id === stepConfig.highlightedOption;
                  
                  return h('div', {
                    key: option.id,
                    onClick: () => handleOptionSelect(option),
                    className: `relative bg-white border-2 rounded-xl p-6 cursor-pointer transition-all flex items-center gap-4 ${
                      isHighlighted
                        ? 'border-green-500 bg-gradient-to-br from-white to-green-50 shadow-lg shadow-green-500/20 scale-105'
                        : 'border-gray-200 hover:border-red-500 hover:shadow-lg'
                    }`
                  },
                    isHighlighted && stepConfig.badge && h('div', {
                      className: "absolute -top-3 left-4 bg-green-500 text-white text-xs font-bold uppercase tracking-wider px-3 py-1 rounded-full shadow-lg"
                    }, stepConfig.badge),
                    
                    h('div', {
                      className: `flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center ${
                        isHighlighted ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-600'
                      }`
                    }, h(IconComponent, { className: "w-6 h-6" })),
                    
                    h('div', { className: "flex-1" },
                      h('div', { className: "font-semibold text-gray-900" }, option.title),
                      h('div', {
                        className: `font-bold ${isHighlighted ? 'text-green-500' : 'text-red-500'}`
                      }, '→')
                    )
                  );
                })
              ),

              h('div', { className: "text-center text-sm text-gray-500" },
                "12 people booked a consultation today • ⭐⭐⭐⭐⭐ 4.9/5 rating"
              )
            ),

            // Step 2: Value - High Complexity
            currentStep === 'value' && getValueStep() === 'value-high' && h('div', { className: "space-y-8" },
              h('button', {
                onClick: () => goToStep('qualification'),
                className: "flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
              }, h(ArrowLeft, { className: "w-4 h-4" }), 'Back'),

              h('div', { className: "text-center max-w-2xl mx-auto" },
                h('div', { className: "w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6" },
                  h(Sparkles, { className: "w-8 h-8 text-green-600" })
                ),
                h('h2', { className: "text-3xl font-bold text-gray-900 mb-6" }, "Perfect! You need expert guidance."),
                h('p', { className: "text-lg text-gray-700 mb-8" }, "Your situation requires personalized advice. Let's book a free consultation to ensure you get the best coverage at the best price."),
                h('button', {
                  onClick: () => goToStep('booking'),
                  className: "inline-flex items-center gap-2 bg-red-500 hover:bg-red-600 text-white font-bold py-4 px-8 rounded-lg text-lg transition-colors"
                }, 'Book Free Consultation', h(ArrowRight, { className: "w-5 h-5" }))
              )
            ),

            // Step 2: Value - Medium Complexity  
            currentStep === 'value' && getValueStep() === 'value-medium' && h('div', { className: "space-y-8" },
              h('button', {
                onClick: () => goToStep('qualification'),
                className: "flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
              }, h(ArrowLeft, { className: "w-4 h-4" }), 'Back'),

              h('div', { className: "text-center" },
                h('h2', { className: "text-3xl font-bold text-gray-900 mb-8" }, "Great choice! Here are your options:")
              ),

              h('div', { className: "grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto" },
                h('div', { className: "bg-red-50 border-2 border-red-200 rounded-xl p-6" },
                  h('div', { className: "w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mb-4" },
                    h(Phone, { className: "w-6 h-6 text-red-600" })
                  ),
                  h('h3', { className: "font-bold text-xl mb-4" }, "Free Consultation"),
                  h('p', { className: "text-gray-700 mb-6" }, "Get personalized advice and potentially save CHF 800-1,500 per year."),
                  h('button', {
                    onClick: () => goToStep('booking'),
                    className: "w-full bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-lg transition-colors"
                  }, 'Book Call →')
                ),
                
                h('div', { className: "bg-gray-50 border-2 border-gray-200 rounded-xl p-6" },
                  h('div', { className: "w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mb-4" },
                    h(Scale, { className: "w-6 h-6 text-gray-600" })
                  ),
                  h('h3', { className: "font-bold text-xl mb-4" }, "Self-Service Quotes"),
                  h('p', { className: "text-gray-700 mb-6" }, "Get standard quotes in 4-5 minutes."),
                  h('button', {
                    onClick: () => goToStep('booking'),
                    className: "w-full bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg transition-colors"
                  }, 'Get Quotes →')
                )
              )
            ),

            // Step 2: Value - Low Complexity
            currentStep === 'value' && getValueStep() === 'value-low' && h('div', { className: "space-y-8" },
              h('button', {
                onClick: () => goToStep('qualification'),
                className: "flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
              }, h(ArrowLeft, { className: "w-4 h-4" }), 'Back'),

              h('div', { className: "text-center" },
                h('h2', { className: "text-3xl font-bold text-gray-900 mb-8" }, "No problem! How can I help?")
              ),

              h('div', { className: "max-w-2xl mx-auto space-y-4" },
                h('div', {
                  onClick: () => goToStep('booking'),
                  className: "bg-white border-2 border-gray-200 rounded-xl p-6 cursor-pointer hover:border-red-500 hover:shadow-lg transition-all flex items-center gap-4"
                },
                  h('div', { className: "w-12 h-12 bg-red-100 rounded-full flex items-center justify-center" },
                    h(Phone, { className: "w-6 h-6 text-red-600" })
                  ),
                  h('div', { className: "flex-1" },
                    h('h3', { className: "font-bold text-lg" }, "Quick Call"),
                    h('p', { className: "text-gray-600" }, "Personalized advice (15 min)")
                  ),
                  h('button', { className: "bg-red-500 text-white px-4 py-2 rounded-lg font-semibold" }, 'Book Now →')
                ),
                
                h('div', {
                  onClick: () => goToStep('booking'),
                  className: "bg-white border-2 border-gray-200 rounded-xl p-6 cursor-pointer hover:border-red-500 hover:shadow-lg transition-all flex items-center gap-4"
                },
                  h('div', { className: "w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center" },
                    h(Scale, { className: "w-6 h-6 text-blue-600" })
                  ),
                  h('div', { className: "flex-1" },
                    h('h3', { className: "font-bold text-lg" }, "Compare Rates"),
                    h('p', { className: "text-gray-600" }, "Standard quotes (4-5 min)")
                  ),
                  h('button', { className: "bg-red-500 text-white px-4 py-2 rounded-lg font-semibold" }, 'Get Quotes →')
                )
              )
            ),

            // Step 3: Booking Form
            currentStep === 'booking' && h('div', { className: "space-y-8" },
              h('button', {
                onClick: () => goToStep('value'),
                className: "flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
              }, h(ArrowLeft, { className: "w-4 h-4" }), 'Back'),

              h('div', { className: "text-center" },
                h('div', { className: "w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6" },
                  h(Calendar, { className: "w-8 h-8 text-blue-600" })
                ),
                h('h2', { className: "text-3xl font-bold text-gray-900 mb-4" }, "Let's get you set up!"),
                h('p', { className: "text-lg text-gray-600" }, "Just a few details and we'll be in touch within 24 hours")
              ),
              
              h('form', {
                onSubmit: handleBookingSubmit,
                className: "max-w-md mx-auto space-y-6"
              },
                h('div', {},
                  h('label', {
                    htmlFor: "name",
                    className: "block text-sm font-medium text-gray-700 mb-2"
                  }, "Full Name"),
                  h('input', {
                    type: "text",
                    id: "name",
                    value: formData.name,
                    onChange: (e) => setFormData(prev => ({ ...prev, name: e.target.value })),
                    required: true,
                    className: "w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors",
                    placeholder: "Your full name"
                  })
                ),
                
                h('div', {},
                  h('label', {
                    htmlFor: "email",
                    className: "block text-sm font-medium text-gray-700 mb-2"
                  }, "Email Address"),
                  h('input', {
                    type: "email",
                    id: "email",
                    value: formData.email,
                    onChange: (e) => setFormData(prev => ({ ...prev, email: e.target.value })),
                    required: true,
                    className: "w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors",
                    placeholder: "your.email@example.com"
                  })
                ),
                
                h('div', {},
                  h('label', {
                    htmlFor: "phone",
                    className: "block text-sm font-medium text-gray-700 mb-2"
                  }, "Phone Number"),
                  h('input', {
                    type: "tel",
                    id: "phone",
                    value: formData.phone,
                    onChange: (e) => setFormData(prev => ({ ...prev, phone: e.target.value })),
                    required: true,
                    className: "w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors",
                    placeholder: "+41 XX XXX XX XX"
                  })
                ),
                
                h('button', {
                  type: "submit",
                  className: "w-full bg-red-500 hover:bg-red-600 text-white font-bold py-4 px-6 rounded-lg text-lg transition-colors flex items-center justify-center gap-2"
                }, 'Continue to Calendar', h(ArrowRight, { className: "w-5 h-5" }))
              )
            ),

            // Step 4: Success
            currentStep === 'success' && h('div', { className: "text-center max-w-2xl mx-auto space-y-8" },
              h('div', { className: "w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto" },
                h(CheckCircle2, { className: "w-10 h-10 text-green-600" })
              ),
              h('h2', { className: "text-3xl font-bold text-gray-900" }, "Thank you!"),
              h('p', { className: "text-lg text-gray-700" }, "Your booking request has been submitted. We'll contact you shortly to schedule your free consultation."),
              h('div', { className: "bg-green-50 border border-green-200 rounded-xl p-6" },
                h('h3', { className: "font-bold text-green-900 mb-4" }, "What happens next:"),
                h('ul', { className: "text-green-800 text-left space-y-2" },
                  h('li', { className: "flex items-start gap-2" },
                    h(CheckCircle2, { className: "w-5 h-5 text-green-600 mt-0.5 flex-shrink-0" }),
                    "We'll call you within 24 hours to confirm your appointment"
                  ),
                  h('li', { className: "flex items-start gap-2" },
                    h(CheckCircle2, { className: "w-5 h-5 text-green-600 mt-0.5 flex-shrink-0" }),
                    "Prepare any current insurance documents"
                  ),
                  h('li', { className: "flex items-start gap-2" },
                    h(CheckCircle2, { className: "w-5 h-5 text-green-600 mt-0.5 flex-shrink-0" }),
                    "Get ready to potentially save CHF 800-1,500 per year"
                  )
                )
              ),
              h('button', {
                onClick: onClose,
                className: "bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-lg transition-colors"
              }, 'Close')
            )
          )
        )
      );
    };

    // Page context from Astro
    const pageContext = {
      intent: '${pageIntent}',
      city: '${city}',
      slug: '${pageSlug}',
      providerName: '${providerName}'
    };

    // Modal state
    let isModalOpen = false;
    let root = null;

    const renderModal = () => {
      const container = document.getElementById('smart-modal-root');
      if (!container) {
        console.error('❌ Modal container not found');
        return;
      }
      
      if (!root) {
        root = ReactDOM.createRoot(container);
      }
      
      root.render(h(SmartModal, {
        isOpen: isModalOpen,
        onClose: closeModal,
        pageContext: pageContext
      }));
    };
    
    const openModal = () => {
      console.log('🎯 Opening React Smart Modal');
      isModalOpen = true;
      renderModal();
    };
    
    const closeModal = () => {
      console.log('🔒 Closing React Smart Modal');
      isModalOpen = false;
      renderModal();
    };
    
    // Global functions for compatibility
    window.openSmartModal = openModal;
    window.closeSmartModal = closeModal;
    
    // Legacy compatibility
    window.openOffersModal = openModal;
    window.openConsultationModal = openModal;
    window.showConsultationModal = openModal;
    
    console.log('✅ Smart Modal React component ready');
    console.log('📍 Page context:', pageContext);
  });
</script>

<style>
  /* Tailwind-like utilities for React components */
  .fixed { position: fixed; }
  .inset-0 { top: 0; right: 0; bottom: 0; left: 0; }
  .bg-black { background-color: rgb(0 0 0); }
  .bg-opacity-60 { background-color: rgb(0 0 0 / 0.6); }
  .z-50 { z-index: 50; }
  .flex { display: flex; }
  .items-center { align-items: center; }
  .justify-center { justify-content: center; }
  .p-0 { padding: 0; }
  .bg-white { background-color: rgb(255 255 255); }
  .w-full { width: 100%; }
  .h-full { height: 100%; }
  .relative { position: relative; }
  .shadow-2xl { box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25); }
  .absolute { position: absolute; }
  .top-4 { top: 1rem; }
  .right-4 { right: 1rem; }
  .z-10 { z-index: 10; }
  .p-2 { padding: 0.5rem; }
  .text-gray-400 { color: rgb(156 163 175); }
  .hover\:text-gray-600:hover { color: rgb(75 85 99); }
  .rounded-lg { border-radius: 0.5rem; }
  .hover\:bg-gray-100:hover { background-color: rgb(243 244 246); }
  .transition-colors { transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out; }
  .min-w-\[44px\] { min-width: 44px; }
  .min-h-\[44px\] { min-height: 44px; }
  .w-6 { width: 1.5rem; }
  .h-6 { height: 1.5rem; }
  .p-8 { padding: 2rem; }
  .space-y-8 > * + * { margin-top: 2rem; }
  .text-center { text-align: center; }
  .text-3xl { font-size: 1.875rem; line-height: 2.25rem; }
  .font-bold { font-weight: 700; }
  .text-gray-900 { color: rgb(17 24 39); }
  .mb-4 { margin-bottom: 1rem; }
  .text-lg { font-size: 1.125rem; line-height: 1.75rem; }
  .text-gray-600 { color: rgb(75 85 99); }
  .mb-2 { margin-bottom: 0.5rem; }
  .text-xl { font-size: 1.25rem; line-height: 1.75rem; }
  .font-semibold { font-weight: 600; }
  .grid { display: grid; }
  .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
  .gap-4 { gap: 1rem; }
  .max-w-4xl { max-width: 56rem; }
  .mx-auto { margin-left: auto; margin-right: auto; }
  .border-2 { border-width: 2px; }
  .rounded-xl { border-radius: 0.75rem; }
  .p-6 { padding: 1.5rem; }
  .cursor-pointer { cursor: pointer; }
  .transition-all { transition: all 0.15s ease-in-out; }
  .border-gray-200 { border-color: rgb(229 231 235); }
  .hover\:border-red-500:hover { border-color: rgb(239 68 68); }
  .hover\:shadow-lg:hover { box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -2px rgb(0 0 0 / 0.05); }
  .border-green-500 { border-color: rgb(34 197 94); }
  .bg-gradient-to-br { background-image: linear-gradient(to bottom right, var(--tw-gradient-stops)); }
  .from-white { --tw-gradient-from: #fff; --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgb(255 255 255 / 0)); }
  .to-green-50 { --tw-gradient-to: #f0fdf4; }
  .shadow-lg { box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -2px rgb(0 0 0 / 0.05); }
  .shadow-green-500\/20 { box-shadow: 0 10px 15px -3px rgb(34 197 94 / 0.2), 0 4px 6px -2px rgb(34 197 94 / 0.2); }
  .scale-105 { transform: scale(1.05); }
  .-top-3 { top: -0.75rem; }
  .left-4 { left: 1rem; }
  .bg-green-500 { background-color: rgb(34 197 94); }
  .text-white { color: rgb(255 255 255); }
  .text-xs { font-size: 0.75rem; line-height: 1rem; }
  .uppercase { text-transform: uppercase; }
  .tracking-wider { letter-spacing: 0.05em; }
  .px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }
  .py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }
  .rounded-full { border-radius: 9999px; }
  .flex-shrink-0 { flex-shrink: 0; }
  .w-12 { width: 3rem; }
  .h-12 { height: 3rem; }
  .bg-green-100 { background-color: rgb(220 252 231); }
  .text-green-600 { color: rgb(22 163 74); }
  .bg-gray-100 { background-color: rgb(243 244 246); }
  .flex-1 { flex: 1 1 0%; }
  .text-green-500 { color: rgb(34 197 94); }
  .text-red-500 { color: rgb(239 68 68); }
  .text-sm { font-size: 0.875rem; line-height: 1.25rem; }
  .text-gray-500 { color: rgb(107 114 128); }
  .gap-2 { gap: 0.5rem; }
  .hover\:text-gray-900:hover { color: rgb(17 24 39); }
  .w-4 { width: 1rem; }
  .h-4 { height: 1rem; }
  .max-w-2xl { max-width: 42rem; }
  .w-16 { width: 4rem; }
  .h-16 { height: 4rem; }
  .mb-6 { margin-bottom: 1.5rem; }
  .w-8 { width: 2rem; }
  .h-8 { height: 2rem; }
  .mb-8 { margin-bottom: 2rem; }
  .text-gray-700 { color: rgb(55 65 81); }
  .inline-flex { display: inline-flex; }
  .bg-red-500 { background-color: rgb(239 68 68); }
  .hover\:bg-red-600:hover { background-color: rgb(220 38 38); }
  .py-4 { padding-top: 1rem; padding-bottom: 1rem; }
  .px-8 { padding-left: 2rem; padding-right: 2rem; }
  .w-5 { width: 1.25rem; }
  .h-5 { height: 1.25rem; }
  .grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
  .gap-6 { gap: 1.5rem; }
  .bg-red-50 { background-color: rgb(254 242 242); }
  .border-red-200 { border-color: rgb(254 202 202); }
  .bg-red-100 { background-color: rgb(254 226 226); }
  .text-red-600 { color: rgb(220 38 38); }
  .py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; }
  .px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }
  .bg-gray-50 { background-color: rgb(249 250 251); }
  .bg-gray-600 { background-color: rgb(75 85 99); }
  .hover\:bg-gray-700:hover { background-color: rgb(55 65 81); }
  .space-y-4 > * + * { margin-top: 1rem; }
  .bg-blue-100 { background-color: rgb(219 234 254); }
  .text-blue-600 { color: rgb(37 99 235); }
  .px-4 { padding-left: 1rem; padding-right: 1rem; }
  .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
  .space-y-6 > * + * { margin-top: 1.5rem; }
  .block { display: block; }
  .font-medium { font-weight: 500; }
  .border { border-width: 1px; }
  .border-gray-300 { border-color: rgb(209 213 219); }
  .focus\:ring-2:focus { box-shadow: 0 0 0 2px rgb(239 68 68 / 0.5); }
  .focus\:ring-red-500:focus { --tw-ring-color: rgb(239 68 68); }
  .focus\:border-red-500:focus { border-color: rgb(239 68 68); }
  .w-20 { width: 5rem; }
  .h-20 { height: 5rem; }
  .border-green-200 { border-color: rgb(187 247 208); }
  .font-bold { font-weight: 700; }
  .text-green-900 { color: rgb(20 83 45); }
  .text-green-800 { color: rgb(22 101 52); }
  .text-left { text-align: left; }
  .space-y-2 > * + * { margin-top: 0.5rem; }
  .items-start { align-items: flex-start; }
  .mt-0\.5 { margin-top: 0.125rem; }

  /* Responsive utilities */
  @media (min-width: 768px) {
    .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
  }

  @media (min-width: 1024px) {
    .lg\:text-4xl { font-size: 2.25rem; line-height: 2.5rem; }
    .lg\:max-w-5xl { max-width: 64rem; }
    .lg\:max-h-\[90vh\] { max-height: 90vh; }
    .lg\:rounded-2xl { border-radius: 1rem; }
    .lg\:h-auto { height: auto; }
    .lg\:p-4 { padding: 1rem; }
    .lg\:p-12 { padding: 3rem; }
  }

  /* Overflow handling */
  .overflow-y-auto { overflow-y: auto; }
</style>