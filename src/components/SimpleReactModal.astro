---
// Get current page context for dynamic modal behavior
const currentPath = Astro.url.pathname;

// Determine intent based on URL path
let pageIntent = 'home';
if (currentPath.includes('/setup') || currentPath.includes('/new-health')) pageIntent = 'setup';
else if (currentPath.includes('/family') || currentPath.includes('/coverage')) pageIntent = 'family';  
else if (currentPath.includes('/change') || currentPath.includes('/switch')) pageIntent = 'change';
else if (currentPath.includes('/cheapest')) pageIntent = 'cheapest';
else if (currentPath.includes('/best')) pageIntent = 'best';
else if (currentPath.includes('/compare')) pageIntent = 'compare';
else if (currentPath.includes('/healthcare/all-insurances/')) pageIntent = 'provider';

// Detect city from URL
let city = '';
const cityPatterns = ['zurich', 'basel', 'bern', 'geneva', 'lausanne', 'lugano', 'zug'];
for (const cityName of cityPatterns) {
  if (currentPath.includes(cityName)) {
    city = cityName;
    break;
  }
}

// Extract provider name for provider pages
let providerName = '';
if (pageIntent === 'provider') {
  const pathParts = currentPath.split('/');
  providerName = pathParts[pathParts.length - 1]?.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) || '';
}
---

<!-- React Modal Container -->
<div id="react-modal-container"></div>

<!-- React CDN -->
<script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>

<script>
console.log('🚀 Starting React Modal Setup...');

// Wait for React to be available
function initReactModal() {
  if (typeof React === 'undefined' || typeof ReactDOM === 'undefined') {
    console.log('⏳ Waiting for React...');
    setTimeout(initReactModal, 100);
    return;
  }
  
  console.log('✅ React loaded successfully');
  
  const { useState, useEffect, createElement: h } = React;
  
  // Simple icon components (no external dependencies)
  const XIcon = () => h('svg', { className: 'w-6 h-6', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' },
    h('path', { strokeLinecap: 'round', strokeLinejoin: 'round', strokeWidth: '2', d: 'M6 18L18 6M6 6l12 12' })
  );
  
  const ArrowLeftIcon = () => h('svg', { className: 'w-4 h-4', fill: 'currentColor', viewBox: '0 0 20 20' },
    h('path', { fillRule: 'evenodd', d: 'M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z', clipRule: 'evenodd' })
  );
  
  const ArrowRightIcon = () => h('svg', { className: 'w-5 h-5', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' },
    h('path', { strokeLinecap: 'round', strokeLinejoin: 'round', strokeWidth: '2', d: 'M14 5l7 7m0 0l-7 7m7-7H3' })
  );

  const SmartModal = ({ isOpen, onClose, pageContext = {} }) => {
    const [currentStep, setCurrentStep] = useState('qualification');
    const [userData, setUserData] = useState({});
    const [formData, setFormData] = useState({ name: '', email: '', phone: '' });

    // Reset modal when opened
    useEffect(() => {
      if (isOpen) {
        setCurrentStep('qualification');
        setUserData({});
        setFormData({ name: '', email: '', phone: '' });
        document.body.style.overflow = 'hidden';
      } else {
        document.body.style.overflow = '';
      }
    }, [isOpen]);

    // Close on ESC key
    useEffect(() => {
      const handleKeyDown = (e) => {
        if (e.key === 'Escape' && isOpen) {
          onClose();
        }
      };
      
      if (isOpen) {
        document.addEventListener('keydown', handleKeyDown);
      }
      
      return () => {
        document.removeEventListener('keydown', handleKeyDown);
      };
    }, [isOpen, onClose]);

    const getStepOneConfig = (pageIntent) => {
      switch(pageIntent) {
        case 'setup':
          return {
            headline: "Welcome to Switzerland!",
            subline: "You have 3 months to register. Let's get started.",
            question: "What best describes your situation?",
            highlightedOption: 'new-to-switzerland',
            badge: 'RECOMMENDED FOR YOU'
          };
        
        case 'family':
          return {
            headline: "Let's optimize your family's coverage",
            subline: "Most families save CHF 1,200-2,800 with expert help",
            question: "Tell me about your situation:",
            highlightedOption: 'family',
            badge: 'SUGGESTED FOR FAMILIES'
          };
        
        case 'change':
          return {
            headline: "Ready to switch for 2026?",
            subline: "Switching deadline is 30 November 2025",
            question: "What's your goal?",
            highlightedOption: 'switch-save',
            badge: 'POPULAR CHOICE'
          };
        
        case 'compare':
          return {
            headline: "Comparing your options?",
            subline: "Let me help you choose the right one",
            question: "What brings you here?",
            highlightedOption: 'compare-options',
            badge: 'FASTEST WAY'
          };
        
        default:
          return {
            headline: "What's your situation?",
            subline: "Personal, English-speaking advice. Free & no obligation.",
            question: "What brings you here today?",
            highlightedOption: null,
            badge: null
          };
      }
    };

    const stepConfig = getStepOneConfig(pageContext.intent || 'home');

    const qualificationOptions = [
      { id: 'new-to-switzerland', icon: '🇨🇭', title: 'I just moved to Switzerland', score: 9 },
      { id: 'family', icon: '👨‍👩‍👧‍👦', title: 'I need family coverage', score: 8 },
      { id: 'switch-save', icon: '💰', title: 'I want to switch and save money', score: 6 },
      { id: 'compare-options', icon: '⚖️', title: "I'm comparing different options", score: 4 },
      { id: 'have-questions', icon: '❓', title: 'I have specific questions', score: 3 },
      { id: 'just-browsing', icon: '👀', title: "I'm just browsing", score: 2 }
    ];

    const handleOptionSelect = (option) => {
      setUserData({
        situation: option.id,
        complexityScore: option.score
      });
      setCurrentStep('value');
    };

    const goToStep = (step) => {
      setCurrentStep(step);
    };

    const handleBookingSubmit = (e) => {
      e.preventDefault();
      if (formData.name && formData.email && formData.phone) {
        setUserData(prev => ({ ...prev, bookingData: formData }));
        setCurrentStep('success');
      } else {
        alert('Please fill in all fields');
      }
    };

    const getValueStep = () => {
      const { complexityScore } = userData;
      if (complexityScore >= 7) return 'value-high';
      if (complexityScore >= 4) return 'value-medium';
      return 'value-low';
    };

    if (!isOpen) return null;

    return h('div', {
      style: {
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.6)',
        backdropFilter: 'blur(4px)',
        zIndex: 9999,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '0'
      }
    },
      h('div', {
        style: {
          backgroundColor: 'white',
          width: '100%',
          height: '100%',
          maxWidth: '1200px',
          maxHeight: '90vh',
          borderRadius: '1rem',
          overflowY: 'auto',
          position: 'relative',
          boxShadow: '0 25px 50px -12px rgb(0 0 0 / 0.25)'
        }
      },
        // Close Button
        h('button', {
          onClick: onClose,
          style: {
            position: 'absolute',
            top: '1rem',
            right: '1rem',
            zIndex: 10,
            padding: '0.5rem',
            color: '#9CA3AF',
            borderRadius: '0.5rem',
            border: 'none',
            background: 'transparent',
            cursor: 'pointer',
            minWidth: '44px',
            minHeight: '44px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }
        }, h(XIcon)),

        h('div', { style: { padding: '3rem' } },
          
          // Step 1: Qualification
          currentStep === 'qualification' && h('div', { style: { display: 'flex', flexDirection: 'column', gap: '2rem' } },
            h('div', { style: { textAlign: 'center' } },
              h('h2', { 
                style: { 
                  fontSize: '2.25rem', 
                  fontWeight: 'bold', 
                  color: '#111827', 
                  marginBottom: '1rem' 
                } 
              }, stepConfig.headline),
              h('p', { 
                style: { 
                  fontSize: '1.125rem', 
                  color: '#6B7280', 
                  marginBottom: '0.5rem' 
                } 
              }, stepConfig.subline),
              h('p', { 
                style: { 
                  fontSize: '1.25rem', 
                  fontWeight: '600', 
                  color: '#111827' 
                } 
              }, stepConfig.question)
            ),

            h('div', { 
              style: { 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', 
                gap: '1rem', 
                maxWidth: '56rem', 
                margin: '0 auto' 
              } 
            },
              ...qualificationOptions.map(option => {
                const isHighlighted = option.id === stepConfig.highlightedOption;
                
                return h('div', {
                  key: option.id,
                  onClick: () => handleOptionSelect(option),
                  style: {
                    position: 'relative',
                    backgroundColor: 'white',
                    border: isHighlighted ? '2px solid #10B981' : '2px solid #E5E7EB',
                    borderRadius: '0.75rem',
                    padding: '1.5rem',
                    cursor: 'pointer',
                    transition: 'all 0.15s ease-in-out',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '1rem',
                    background: isHighlighted ? 'linear-gradient(135deg, #FFFFFF 0%, #F0FDF4 100%)' : 'white',
                    boxShadow: isHighlighted ? '0 10px 15px -3px rgb(16 185 129 / 0.15)' : '0 1px 3px 0 rgb(0 0 0 / 0.1)',
                    transform: isHighlighted ? 'scale(1.02)' : 'scale(1)'
                  }
                },
                  isHighlighted && stepConfig.badge && h('div', {
                    style: {
                      position: 'absolute',
                      top: '-12px',
                      left: '16px',
                      backgroundColor: '#10B981',
                      color: 'white',
                      fontSize: '11px',
                      fontWeight: '700',
                      textTransform: 'uppercase',
                      letterSpacing: '0.5px',
                      padding: '4px 12px',
                      borderRadius: '12px',
                      boxShadow: '0 2px 8px rgba(16, 185, 129, 0.3)'
                    }
                  }, stepConfig.badge),
                  
                  h('div', { 
                    style: { 
                      fontSize: '2.5rem',
                      flexShrink: 0
                    } 
                  }, option.icon),
                  
                  h('div', { style: { flex: 1 } },
                    h('div', { 
                      style: { 
                        fontWeight: '600', 
                        color: '#111827',
                        marginBottom: '0.25rem'
                      } 
                    }, option.title),
                    h('div', {
                      style: { 
                        fontWeight: 'bold',
                        color: isHighlighted ? '#10B981' : '#EF4444'
                      }
                    }, '→')
                  )
                );
              })
            ),

            h('div', { 
              style: { 
                textAlign: 'center', 
                fontSize: '0.875rem', 
                color: '#6B7280' 
              } 
            }, "12 people booked a consultation today • ⭐⭐⭐⭐⭐ 4.9/5 rating")
          ),

          // Step 2: Success (simplified for now)
          currentStep === 'value' && h('div', { style: { textAlign: 'center' } },
            h('button', {
              onClick: () => goToStep('qualification'),
              style: {
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem',
                color: '#6B7280',
                background: 'transparent',
                border: 'none',
                cursor: 'pointer',
                marginBottom: '2rem'
              }
            }, h(ArrowLeftIcon), 'Back'),
            
            h('div', { style: { fontSize: '4rem', marginBottom: '1.5rem' } }, '🎉'),
            h('h2', { 
              style: { 
                fontSize: '1.875rem', 
                fontWeight: 'bold', 
                color: '#111827', 
                marginBottom: '1rem' 
              } 
            }, 'Perfect! You need expert guidance.'),
            h('p', { 
              style: { 
                fontSize: '1.125rem', 
                color: '#374151', 
                marginBottom: '2rem' 
              } 
            }, 'Your situation requires personalized advice. Let\'s book a free consultation.'),
            
            h('button', {
              onClick: () => setCurrentStep('booking'),
              style: {
                display: 'inline-flex',
                alignItems: 'center',
                gap: '0.5rem',
                backgroundColor: '#EF4444',
                color: 'white',
                fontWeight: 'bold',
                padding: '1rem 2rem',
                borderRadius: '0.5rem',
                fontSize: '1.125rem',
                border: 'none',
                cursor: 'pointer'
              }
            }, 'Book Free Consultation', h(ArrowRightIcon))
          ),

          // Step 3: Booking Form
          currentStep === 'booking' && h('div', {},
            h('button', {
              onClick: () => goToStep('value'),
              style: {
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem',
                color: '#6B7280',
                background: 'transparent',
                border: 'none',
                cursor: 'pointer',
                marginBottom: '2rem'
              }
            }, h(ArrowLeftIcon), 'Back'),

            h('div', { style: { textAlign: 'center', marginBottom: '2rem' } },
              h('h2', { 
                style: { 
                  fontSize: '1.875rem', 
                  fontWeight: 'bold', 
                  color: '#111827', 
                  marginBottom: '1rem' 
                } 
              }, 'Let\'s get you set up!'),
              h('p', { 
                style: { 
                  fontSize: '1.125rem', 
                  color: '#6B7280' 
                } 
              }, 'Just a few details and we\'ll be in touch within 24 hours')
            ),
            
            h('form', {
              onSubmit: handleBookingSubmit,
              style: { 
                maxWidth: '28rem', 
                margin: '0 auto', 
                display: 'flex', 
                flexDirection: 'column', 
                gap: '1.5rem' 
              }
            },
              h('div', {},
                h('label', {
                  style: { 
                    display: 'block', 
                    fontSize: '0.875rem', 
                    fontWeight: '500', 
                    color: '#374151', 
                    marginBottom: '0.5rem' 
                  }
                }, 'Full Name'),
                h('input', {
                  type: 'text',
                  value: formData.name,
                  onChange: (e) => setFormData(prev => ({ ...prev, name: e.target.value })),
                  required: true,
                  style: {
                    width: '100%',
                    padding: '0.75rem 1rem',
                    border: '1px solid #D1D5DB',
                    borderRadius: '0.5rem',
                    fontSize: '1rem'
                  },
                  placeholder: 'Your full name'
                })
              ),
              
              h('div', {},
                h('label', {
                  style: { 
                    display: 'block', 
                    fontSize: '0.875rem', 
                    fontWeight: '500', 
                    color: '#374151', 
                    marginBottom: '0.5rem' 
                  }
                }, 'Email Address'),
                h('input', {
                  type: 'email',
                  value: formData.email,
                  onChange: (e) => setFormData(prev => ({ ...prev, email: e.target.value })),
                  required: true,
                  style: {
                    width: '100%',
                    padding: '0.75rem 1rem',
                    border: '1px solid #D1D5DB',
                    borderRadius: '0.5rem',
                    fontSize: '1rem'
                  },
                  placeholder: 'your.email@example.com'
                })
              ),
              
              h('div', {},
                h('label', {
                  style: { 
                    display: 'block', 
                    fontSize: '0.875rem', 
                    fontWeight: '500', 
                    color: '#374151', 
                    marginBottom: '0.5rem' 
                  }
                }, 'Phone Number'),
                h('input', {
                  type: 'tel',
                  value: formData.phone,
                  onChange: (e) => setFormData(prev => ({ ...prev, phone: e.target.value })),
                  required: true,
                  style: {
                    width: '100%',
                    padding: '0.75rem 1rem',
                    border: '1px solid #D1D5DB',
                    borderRadius: '0.5rem',
                    fontSize: '1rem'
                  },
                  placeholder: '+41 XX XXX XX XX'
                })
              ),
              
              h('button', {
                type: 'submit',
                style: {
                  width: '100%',
                  backgroundColor: '#EF4444',
                  color: 'white',
                  fontWeight: 'bold',
                  padding: '1rem 1.5rem',
                  borderRadius: '0.5rem',
                  fontSize: '1.125rem',
                  border: 'none',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '0.5rem'
                }
              }, 'Continue to Calendar', h(ArrowRightIcon))
            )
          ),

          // Step 4: Success
          currentStep === 'success' && h('div', { style: { textAlign: 'center' } },
            h('div', { style: { fontSize: '5rem', marginBottom: '1.5rem' } }, '🎉'),
            h('h2', { 
              style: { 
                fontSize: '1.875rem', 
                fontWeight: 'bold', 
                color: '#111827', 
                marginBottom: '1rem' 
              } 
            }, 'Thank you!'),
            h('p', { 
              style: { 
                fontSize: '1.125rem', 
                color: '#374151', 
                marginBottom: '2rem' 
              } 
            }, 'Your booking request has been submitted. We\'ll contact you shortly.'),
            
            h('button', {
              onClick: onClose,
              style: {
                backgroundColor: '#EF4444',
                color: 'white',
                fontWeight: 'bold',
                padding: '0.75rem 1.5rem',
                borderRadius: '0.5rem',
                border: 'none',
                cursor: 'pointer'
              }
            }, 'Close')
          )
        )
      )
    );
  };

  // Page context from Astro
  const pageContext = {
    intent: '${pageIntent}',
    city: '${city}',
    providerName: '${providerName}'
  };

  // Modal state
  let isModalOpen = false;
  let root = null;

  const renderModal = () => {
    const container = document.getElementById('react-modal-container');
    if (!container) {
      console.error('❌ Modal container not found');
      return;
    }
    
    if (!root) {
      root = ReactDOM.createRoot(container);
    }
    
    root.render(h(SmartModal, {
      isOpen: isModalOpen,
      onClose: closeModal,
      pageContext: pageContext
    }));
  };
  
  const openModal = () => {
    console.log('🎯 Opening React Smart Modal');
    isModalOpen = true;
    renderModal();
  };
  
  const closeModal = () => {
    console.log('🔒 Closing React Smart Modal');
    isModalOpen = false;
    renderModal();
  };
  
  // Global functions for compatibility
  window.openSmartModal = openModal;
  window.closeSmartModal = closeModal;
  
  // Legacy compatibility
  window.openOffersModal = openModal;
  window.openConsultationModal = openModal;
  window.showConsultationModal = openModal;
  
  console.log('✅ Smart Modal React component ready');
  console.log('📍 Page context:', pageContext);
  
  // Test the modal
  console.log('🧪 Testing modal functions...');
  console.log('openSmartModal available:', typeof window.openSmartModal === 'function');
  console.log('openOffersModal available:', typeof window.openOffersModal === 'function');
}

// Start initialization
initReactModal();
</script>

<style>
  @media (max-width: 1024px) {
    #react-modal-container [style*="maxWidth: '1200px'"] {
      max-width: 100% !important;
      max-height: 100% !important;
      border-radius: 0 !important;
    }
  }
</style>